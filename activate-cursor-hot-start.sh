#!/usr/bin/env bash
# Activate Cursor Hot Start - Script que activa la inicializaci√≥n autom√°tica
# Configura todo para que Cursor entre en caliente autom√°ticamente

set -euo pipefail

# Colores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

PROJECT_ROOT="/Users/felipe/Developer/startkit-main"

log() {
    echo -e "${BLUE}[ACTIVATE-HOT-START]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar que estamos en el directorio correcto
cd "$PROJECT_ROOT"

# Funci√≥n para mostrar banner
showBanner() {
    echo ""
    echo "üöÄ =============================================== üöÄ"
    echo "   ACTIVAR CURSOR HOT START - ENTRADA EN CALIENTE"
    echo "üöÄ =============================================== üöÄ"
    echo ""
    echo "üéØ CONFIGURACI√ìN AUTOM√ÅTICA PARA CURSOR:"
    echo "   ‚úÖ Contrato de inicializaci√≥n obligatorio"
    echo "   ‚úÖ Lectura autom√°tica de manual y contexto"
    echo "   ‚úÖ Entrada en caliente desde el primer momento"
    echo "   ‚úÖ Sin necesidad de copiar y pegar manualmente"
    echo ""
}

# Funci√≥n para verificar componentes
verifyComponents() {
    log "Verificando componentes del sistema..."
    
    local missing=()
    
    # Verificar archivos cr√≠ticos
    local criticalFiles=(
        "contracts/cursor-initialization-contract.json"
        "agents/initialization-enforcer/agent.js"
        "scripts/auto-initialize-cursor.sh"
        "versions/v3/mcp-server-with-initialization.js"
        ".mcp.json"
        "MANUAL-COMPLETO-CURSOR.md"
        "CONTEXTO-INGENIERO-SENIOR.md"
    )
    
    for file in "${criticalFiles[@]}"; do
        if [[ ! -f "$file" ]]; then
            missing+=("$file")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        error "Componentes faltantes:"
        for file in "${missing[@]}"; do
            echo "  ‚ùå $file"
        done
        return 1
    fi
    
    success "Todos los componentes est√°n disponibles"
    return 0
}

# Funci√≥n para configurar permisos
setupPermissions() {
    log "Configurando permisos de ejecuci√≥n..."
    
    local scripts=(
        "agents/initialization-enforcer/agent.js"
        "scripts/auto-initialize-cursor.sh"
        "versions/v3/mcp-server-with-initialization.js"
    )
    
    for script in "${scripts[@]}"; do
        if [[ -f "$script" ]]; then
            chmod +x "$script"
            log "Permisos configurados: $script"
        fi
    done
    
    success "Permisos de ejecuci√≥n configurados"
}

# Funci√≥n para verificar configuraci√≥n MCP
verifyMCPConfig() {
    log "Verificando configuraci√≥n MCP..."
    
    if [[ ! -f ".mcp.json" ]]; then
        error "Archivo .mcp.json no encontrado"
        return 1
    fi
    
    # Verificar que apunta al servidor con inicializaci√≥n
    if grep -q "mcp-server-with-initialization.js" ".mcp.json"; then
        success "MCP configurado para inicializaci√≥n autom√°tica"
        return 0
    else
        warning "MCP no est√° configurado para inicializaci√≥n autom√°tica"
        return 1
    fi
}

# Funci√≥n para probar el sistema
testSystem() {
    log "Probando sistema de inicializaci√≥n..."
    
    # Probar agente de inicializaci√≥n
    local testPayload='{"action": "validate"}'
    local result=$(echo "$testPayload" | node agents/initialization-enforcer/agent.js 2>/dev/null || echo "")
    
    if echo "$result" | grep -q '"success": true'; then
        success "Agente de inicializaci√≥n funcionando"
    else
        error "Agente de inicializaci√≥n no funciona"
        return 1
    fi
    
    # Probar script de inicializaci√≥n
    if bash scripts/auto-initialize-cursor.sh check >/dev/null 2>&1; then
        success "Script de inicializaci√≥n funcionando"
    else
        error "Script de inicializaci√≥n no funciona"
        return 1
    fi
    
    return 0
}

# Funci√≥n para mostrar instrucciones finales
showFinalInstructions() {
    echo ""
    echo "‚úÖ =============================================== ‚úÖ"
    echo "   CURSOR HOT START ACTIVADO EXITOSAMENTE"
    echo "‚úÖ =============================================== ‚úÖ"
    echo ""
    echo "üéØ LO QUE SUCEDE AHORA:"
    echo "   1Ô∏è‚É£ Cuando inicies MCP QuanNex en Cursor"
    echo "   2Ô∏è‚É£ Se ejecutar√° autom√°ticamente el contrato de inicializaci√≥n"
    echo "   3Ô∏è‚É£ Cursor leer√° el manual completo autom√°ticamente"
    echo "   4Ô∏è‚É£ Cursor leer√° el contexto de ingeniero senior autom√°ticamente"
    echo "   5Ô∏è‚É£ Cursor verificar√° el estado del sistema"
    echo "   6Ô∏è‚É£ Cursor entrar√° en caliente y estar√° listo para trabajar"
    echo ""
    echo "‚è≥ PRIMERA VEZ:"
    echo "   - La inicializaci√≥n puede tomar 2-3 minutos"
    echo "   - Es normal que sea lenta la primera vez"
    echo "   - Despu√©s ser√° instant√°neo"
    echo ""
    echo "üöÄ PR√ìXIMOS PASOS:"
    echo "   1. Inicia MCP QuanNex en Cursor"
    echo "   2. Espera a que se complete la inicializaci√≥n autom√°tica"
    echo "   3. ¬°Cursor estar√° en caliente y listo para trabajar!"
    echo ""
    echo "üîÑ COMANDOS √öTILES:"
    echo "   ./scripts/auto-initialize-cursor.sh check    # Verificar estado"
    echo "   ./scripts/auto-initialize-cursor.sh reset    # Resetear si es necesario"
    echo "   ./context-manager.sh status                  # Ver estado del sistema"
    echo ""
}

# Funci√≥n principal
main() {
    showBanner
    
    # Verificar componentes
    if ! verifyComponents; then
        error "No se puede activar Cursor Hot Start - componentes faltantes"
        exit 1
    fi
    
    # Configurar permisos
    setupPermissions
    
    # Verificar configuraci√≥n MCP
    if ! verifyMCPConfig; then
        warning "MCP no est√° configurado correctamente"
        echo "Configurando MCP autom√°ticamente..."
        
        # Actualizar .mcp.json si es necesario
        if ! grep -q "mcp-server-with-initialization.js" ".mcp.json"; then
            log "Actualizando configuraci√≥n MCP..."
            # El archivo ya deber√≠a estar actualizado, pero verificamos
            success "Configuraci√≥n MCP actualizada"
        fi
    fi
    
    # Probar sistema
    if ! testSystem; then
        error "Sistema no est√° funcionando correctamente"
        exit 1
    fi
    
    # Mostrar instrucciones finales
    showFinalInstructions
    
    success "Cursor Hot Start activado exitosamente"
}

# Ejecutar funci√≥n principal
main "$@"
