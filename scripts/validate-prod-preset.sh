#!/bin/bash
# Validaci√≥n del Preset de Producci√≥n Quannex
# Valida que el preset cumpla con los objetivos de rendimiento

set -euo pipefail

# Colores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

PROJECT_ROOT="/Users/felipe/Developer/startkit-main"

log() {
    echo -e "${BLUE}[VALIDATE-PROD]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar que estamos en el directorio correcto
cd "$PROJECT_ROOT"

# Objetivos de rendimiento del preset de producci√≥n
P95_TARGET=100
P99_TARGET=150
SUCCESS_RATE_TARGET=99.5
TOKENS_TARGET=600
RPS_TARGET=40

# Funci√≥n para validar m√©tricas
validateMetrics() {
    local analysis_file="$1"
    
    if [ ! -f "$analysis_file" ]; then
        error "Archivo de an√°lisis no encontrado: $analysis_file"
        return 1
    fi
    
    # Extraer m√©tricas del JSON
    local p95=$(jq -r '.p95_ms' "$analysis_file")
    local p99=$(jq -r '.p99_ms' "$analysis_file")
    local success_rate=$(jq -r '.ok / .n * 100' "$analysis_file")
    local tokens_out=$(jq -r '.tokens_out_avg' "$analysis_file")
    local rps=$(jq -r '.rps_real' "$analysis_file")
    
    log "Validando m√©tricas del preset de producci√≥n..."
    echo ""
    echo "üìä M√âTRICAS OBTENIDAS:"
    echo "   P95: ${p95}ms (objetivo: ‚â§${P95_TARGET}ms)"
    echo "   P99: ${p99}ms (objetivo: ‚â§${P99_TARGET}ms)"
    echo "   √âxito: ${success_rate}% (objetivo: ‚â•${SUCCESS_RATE_TARGET}%)"
    echo "   Tokens: ${tokens_out} (objetivo: ‚â§${TOKENS_TARGET})"
    echo "   RPS: ${rps} (objetivo: ‚â•${RPS_TARGET})"
    echo ""
    
    local validation_passed=true
    
    # Validar P95
    if (( $(echo "$p95 <= $P95_TARGET" | bc -l) )); then
        success "‚úÖ P95: ${p95}ms ‚â§ ${P95_TARGET}ms"
    else
        error "‚ùå P95: ${p95}ms > ${P95_TARGET}ms"
        validation_passed=false
    fi
    
    # Validar P99
    if (( $(echo "$p99 <= $P99_TARGET" | bc -l) )); then
        success "‚úÖ P99: ${p99}ms ‚â§ ${P99_TARGET}ms"
    else
        error "‚ùå P99: ${p99}ms > ${P99_TARGET}ms"
        validation_passed=false
    fi
    
    # Validar tasa de √©xito
    if (( $(echo "$success_rate >= $SUCCESS_RATE_TARGET" | bc -l) )); then
        success "‚úÖ √âxito: ${success_rate}% ‚â• ${SUCCESS_RATE_TARGET}%"
    else
        error "‚ùå √âxito: ${success_rate}% < ${SUCCESS_RATE_TARGET}%"
        validation_passed=false
    fi
    
    # Validar tokens
    if (( $(echo "$tokens_out <= $TOKENS_TARGET" | bc -l) )); then
        success "‚úÖ Tokens: ${tokens_out} ‚â§ ${TOKENS_TARGET}"
    else
        error "‚ùå Tokens: ${tokens_out} > ${TOKENS_TARGET}"
        validation_passed=false
    fi
    
    # Validar RPS
    if (( $(echo "$rps >= $RPS_TARGET" | bc -l) )); then
        success "‚úÖ RPS: ${rps} ‚â• ${RPS_TARGET}"
    else
        error "‚ùå RPS: ${rps} < ${RPS_TARGET}"
        validation_passed=false
    fi
    
    echo ""
    
    if [ "$validation_passed" = true ]; then
        success "üéâ PRESET DE PRODUCCI√ìN VALIDADO EXITOSAMENTE"
        echo ""
        echo "üèÜ CALIFICACI√ìN: A+"
        echo "‚úÖ Todos los objetivos de rendimiento cumplidos"
        echo "üöÄ Listo para despliegue en producci√≥n"
        return 0
    else
        error "‚ùå PRESET DE PRODUCCI√ìN NO CUMPLE OBJETIVOS"
        echo ""
        echo "üîß RECOMENDACIONES:"
        echo "   - Ajustar palancas de rendimiento"
        echo "   - Revisar configuraci√≥n de recursos"
        echo "   - Ejecutar benchmark m√°s largo"
        return 1
    fi
}

# Funci√≥n para ejecutar validaci√≥n completa
executeValidation() {
    log "Iniciando validaci√≥n del preset de producci√≥n..."
    
    echo ""
    echo "üè≠ =============================================== üè≠"
    echo "   VALIDACI√ìN PRESET DE PRODUCCI√ìN QUANNEX"
    echo "üè≠ =============================================== üè≠"
    echo ""
    echo "üéØ OBJETIVOS DE VALIDACI√ìN:"
    echo "   P95 ‚â§ ${P95_TARGET}ms"
    echo "   P99 ‚â§ ${P99_TARGET}ms"
    echo "   Tasa de √©xito ‚â• ${SUCCESS_RATE_TARGET}%"
    echo "   Tokens salida ‚â§ ${TOKENS_TARGET}"
    echo "   RPS ‚â• ${RPS_TARGET}"
    echo ""
    
    # 1. Aplicar preset de producci√≥n
    log "PASO 1: Aplicando preset de producci√≥n..."
    if make -f Makefile.quannex context-tune-prod; then
        success "Preset de producci√≥n aplicado"
    else
        error "Fallo al aplicar preset de producci√≥n"
        return 1
    fi
    
    # Esperar que se aplique la configuraci√≥n
    sleep 5
    
    # 2. Ejecutar benchmark
    log "PASO 2: Ejecutando benchmark de validaci√≥n (60s)..."
    if make -f Makefile.quannex context-bench; then
        success "Benchmark completado"
    else
        error "Fallo en benchmark"
        return 1
    fi
    
    # 3. Analizar m√©tricas
    log "PASO 3: Analizando m√©tricas..."
    if make -f Makefile.quannex context-analyze; then
        success "An√°lisis completado"
    else
        error "Fallo en an√°lisis"
        return 1
    fi
    
    # 4. Validar m√©tricas
    log "PASO 4: Validando objetivos de rendimiento..."
    validateMetrics "logs/context-bench-analysis.json"
    
    return $?
}

# Funci√≥n para mostrar ayuda
showHelp() {
    echo "=== VALIDACI√ìN PRESET DE PRODUCCI√ìN QUANNEX ==="
    echo ""
    echo "üéØ FUNCI√ìN:"
    echo "   Valida que el preset de producci√≥n cumpla con los objetivos"
    echo "   de rendimiento establecidos para despliegue en producci√≥n"
    echo ""
    echo "üöÄ USO:"
    echo "   ./scripts/validate-prod-preset.sh          # Ejecutar validaci√≥n completa"
    echo "   ./scripts/validate-prod-preset.sh help     # Mostrar ayuda"
    echo ""
    echo "üìã PROCESO DE VALIDACI√ìN:"
    echo "   1. Aplicar preset de producci√≥n optimizado"
    echo "   2. Ejecutar benchmark de validaci√≥n (60s)"
    echo "   3. Analizar m√©tricas obtenidas"
    echo "   4. Validar objetivos de rendimiento"
    echo ""
    echo "üéØ OBJETIVOS DE VALIDACI√ìN:"
    echo "   P95 ‚â§ 100ms"
    echo "   P99 ‚â§ 150ms"
    echo "   Tasa de √©xito ‚â• 99.5%"
    echo "   Tokens salida ‚â§ 600"
    echo "   RPS ‚â• 40"
    echo ""
    echo "‚úÖ RESULTADO:"
    echo "   Preset validado y listo para producci√≥n"
    echo ""
}

# Funci√≥n principal
main() {
    local command="${1:-execute}"
    
    case "$command" in
        "execute"|"validate")
            executeValidation
            ;;
        "help"|*)
            showHelp
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@"
