#!/usr/bin/env bash
set -euo pipefail

# Script de validaci√≥n de m√©tricas QuanNex
# Valida que el endpoint /metrics devuelva m√©tricas v√°lidas

URL="${1:-http://localhost:3000/metrics}"
TIMEOUT="${2:-5}"

echo "üîç [METRICS-VALIDATE] Validando endpoint: $URL"

# Funci√≥n de error con c√≥digo de salida
fail() {
    echo "‚ùå [METRICS-VALIDATE] $1"
    exit $2
}

# Funci√≥n de √©xito
ok() {
    echo "‚úÖ [METRICS-VALIDATE] $1"
}

# 1. Fetch b√°sico con timeout
echo "üì° Obteniendo m√©tricas..."
PAYLOAD="$(curl -fsS --max-time $TIMEOUT "$URL" 2>/dev/null)" || fail "No se pudo obtener m√©tricas del endpoint" 1

# 2. Validaciones b√°sicas de formato OpenMetrics
echo "üîç Validando formato OpenMetrics..."

# Debe tener HELP
echo "$PAYLOAD" | grep -q '# HELP' || fail "Falta # HELP en m√©tricas" 2

# Debe tener TYPE  
echo "$PAYLOAD" | grep -q '# TYPE' || fail "Falta # TYPE en m√©tricas" 3

# No debe tener NaN/Infinity (+Inf es v√°lido en Prometheus)
echo "$PAYLOAD" | grep -E -i 'nan|infinity' && fail "M√©tricas contienen NaN/Infinity" 4

# 3. Validaciones espec√≠ficas de QuanNex
echo "üéØ Validando m√©tricas de negocio QuanNex..."

# Debe tener m√©trica de negocio quannex_gate_status
echo "$PAYLOAD" | grep -q '^quannex_gate_status' || fail "Falta m√©trica de negocio quannex_gate_status" 5

# Debe tener m√©tricas del sistema
echo "$PAYLOAD" | grep -q 'qn_system_uptime_seconds' || fail "Falta m√©trica del sistema qn_system_uptime_seconds" 6

# 4. Validaciones de estructura
echo "üìä Validando estructura de m√©tricas..."

# Contar m√©tricas
HELP_COUNT=$(echo "$PAYLOAD" | grep -c '# HELP' || echo "0")
TYPE_COUNT=$(echo "$PAYLOAD" | grep -c '# TYPE' || echo "0")

if [ "$HELP_COUNT" -lt 3 ]; then
    fail "Muy pocas m√©tricas HELP encontradas: $HELP_COUNT" 7
fi

if [ "$TYPE_COUNT" -lt 3 ]; then
    fail "Muy pocas m√©tricas TYPE encontradas: $TYPE_COUNT" 8
fi

# 5. Validar que no est√© vac√≠o
PAYLOAD_SIZE=${#PAYLOAD}
if [ "$PAYLOAD_SIZE" -lt 100 ]; then
    fail "Payload muy peque√±o: $PAYLOAD_SIZE bytes" 9
fi

# 6. Verificar headers de respuesta
echo "üìã Verificando headers de respuesta..."
HEADERS="$(curl -fsS --max-time $TIMEOUT -I "$URL" 2>/dev/null)"

# Debe tener Content-Type correcto
echo "$HEADERS" | grep -q "Content-Type.*text/plain" || fail "Content-Type incorrecto" 10

# Debe tener Cache-Control
echo "$HEADERS" | grep -q "Cache-Control.*no-store" || fail "Cache-Control incorrecto" 11

# 7. Verificar fuente de m√©tricas
echo "üîç Verificando fuente de m√©tricas..."
SOURCE="$(echo "$HEADERS" | grep -i "X-Metrics-Source" | cut -d: -f2 | tr -d ' \r\n' || echo "unknown")"

case "$SOURCE" in
    "live")
        ok "M√©tricas en vivo funcionando correctamente"
        ;;
    "snapshot")
        echo "‚ö†Ô∏è [METRICS-VALIDATE] Usando snapshot de fallback"
        ;;
    "minimal")
        echo "‚ö†Ô∏è [METRICS-VALIDATE] Usando fallback m√≠nimo"
        ;;
    *)
        echo "‚ö†Ô∏è [METRICS-VALIDATE] Fuente desconocida: $SOURCE"
        ;;
esac

# 8. Resumen final
echo "üìä Resumen de validaci√≥n:"
echo "   - M√©tricas HELP: $HELP_COUNT"
echo "   - M√©tricas TYPE: $TYPE_COUNT" 
echo "   - Tama√±o payload: $PAYLOAD_SIZE bytes"
echo "   - Fuente: $SOURCE"

# 9. Validaci√≥n de integridad (opcional)
if echo "$PAYLOAD" | grep -q "# SNAPSHA:"; then
    ok "Snapshot firmado detectado"
else
    echo "‚ÑπÔ∏è [METRICS-VALIDATE] No hay snapshot firmado"
fi

ok "Validaci√≥n completada exitosamente"
echo "üéâ [METRICS-VALIDATE] Todas las validaciones pasaron"
