#!/bin/bash

# Script de Verificaci√≥n de Pathing Post-Reorganizaci√≥n
# Verifica que no haya problemas de pathing despu√©s de la reorganizaci√≥n de archivos

set -e

echo "üîç VERIFICACI√ìN DE PATHING POST-REORGANIZACI√ìN"
echo "=============================================="

# Verificar directorio correcto
if [ "$(pwd)" != "/Users/felipe/Developer/startkit-main" ]; then
    echo "‚ùå ERROR: No est√°s en el directorio correcto"
    echo "   Actual: $(pwd)"
    echo "   Esperado: /Users/felipe/Developer/startkit-main"
    exit 1
fi
echo "‚úÖ Directorio correcto: $(pwd)"

# 1. VERIFICAR ARCHIVOS CR√çTICOS EN RA√çZ
echo ""
echo "üîç Paso 1: Verificando archivos cr√≠ticos en ra√≠z..."

CRITICAL_FILES=(
    "package.json"
    "orchestrator.js"
    "claude-project-init.sh"
    "Makefile"
    "README.md"
    "SECURITY.md"
)

for file in "${CRITICAL_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå ERROR: Archivo cr√≠tico no encontrado: $file"
        exit 1
    fi
done
echo "‚úÖ Archivos cr√≠ticos en ra√≠z verificados"

# 2. VERIFICAR ORQUESTADOR
echo ""
echo "üîç Paso 2: Verificando orquestador..."

if [ ! -f "orchestration/orchestrator.js" ]; then
    echo "‚ùå ERROR: Orquestador no encontrado"
    exit 1
fi

if ! node orchestration/orchestrator.js health > /dev/null 2>&1; then
    echo "‚ùå ERROR: Orquestador no funciona"
    exit 1
fi
echo "‚úÖ Orquestador funcionando"

# 3. VERIFICAR AGENTES
echo ""
echo "üîç Paso 3: Verificando agentes..."

AGENTS=("context" "prompting" "rules")
for agent in "${AGENTS[@]}"; do
    if [ ! -f "agents/$agent/agent.js" ]; then
        echo "‚ùå ERROR: Agente no encontrado: agents/$agent/agent.js"
        exit 1
    fi
done
echo "‚úÖ Agentes encontrados"

# 4. VERIFICAR ESQUEMAS
echo ""
echo "üîç Paso 4: Verificando esquemas..."

for agent in "${AGENTS[@]}"; do
    if [ ! -f "schemas/agents/$agent.input.schema.json" ]; then
        echo "‚ùå ERROR: Esquema de entrada no encontrado: schemas/agents/$agent.input.schema.json"
        exit 1
    fi
    if [ ! -f "schemas/agents/$agent.output.schema.json" ]; then
        echo "‚ùå ERROR: Esquema de salida no encontrado: schemas/agents/$agent.output.schema.json"
        exit 1
    fi
done
echo "‚úÖ Esquemas encontrados"

# 5. VERIFICAR ARCHIVOS MOVIDOS
echo ""
echo "üîç Paso 5: Verificando archivos movidos..."

# Verificar que los archivos est√°n en sus nuevas ubicaciones
if [ ! -d "workflows/" ]; then
    echo "‚ùå ERROR: Carpeta workflows/ no encontrada"
    exit 1
fi

if [ ! -d "tests/" ]; then
    echo "‚ùå ERROR: Carpeta tests/ no encontrada"
    exit 1
fi

if [ ! -d "reports/" ]; then
    echo "‚ùå ERROR: Carpeta reports/ no encontrada"
    exit 1
fi

if [ ! -d "docs/" ]; then
    echo "‚ùå ERROR: Carpeta docs/ no encontrada"
    exit 1
fi

echo "‚úÖ Carpetas de archivos movidos encontradas"

# 6. VERIFICAR QUE NO HAY ARCHIVOS SUELTOS PROBLEM√ÅTICOS
echo ""
echo "üîç Paso 6: Verificando que no hay archivos sueltos problem√°ticos..."

PROBLEMATIC_PATTERNS=(
    "*-workflow.json"
    "test-gap-*.js"
    "gap-*-test-report.json"
    "gap-*-analysis-report.json"
    "*-REPORT.json"
    "*-SOLUTION-REPORT.md"
    "*-ANALYSIS-*.md"
)

for pattern in "${PROBLEMATIC_PATTERNS[@]}"; do
    if ls $pattern >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  ADVERTENCIA: Archivos sueltos encontrados con patr√≥n: $pattern"
        ls $pattern
    fi
done
echo "‚úÖ Verificaci√≥n de archivos sueltos completada"

# 7. VERIFICAR TESTS
echo ""
echo "üîç Paso 7: Verificando tests..."

if ! npm run test > /dev/null 2>&1; then
    echo "‚ùå ERROR: Tests fallan"
    exit 1
fi
echo "‚úÖ Tests funcionando"

# 8. VERIFICAR QUALITY GATE
echo ""
echo "üîç Paso 8: Verificando quality gate..."

if ! npm run quality:gate > /dev/null 2>&1; then
    echo "‚ùå ERROR: Quality gate falla"
    exit 1
fi
echo "‚úÖ Quality gate funcionando"

# 9. VERIFICAR IMPORTS EN ARCHIVOS PRINCIPALES
echo ""
echo "üîç Paso 9: Verificando imports en archivos principales..."

# Verificar que los imports en archivos principales siguen siendo v√°lidos
if grep -q "import.*\.\./\.\./shared" orchestration/orchestrator.js; then
    echo "‚ùå ERROR: Imports incorrectos en orquestador"
    exit 1
fi
echo "‚úÖ Imports en orquestador correctos"

# 10. VERIFICAR CONFIGURACIONES MCP
echo ""
echo "üîç Paso 10: Verificando configuraciones MCP..."

if [ ! -f ".mcp.json" ]; then
    echo "‚ùå ERROR: Configuraci√≥n MCP no encontrada"
    exit 1
fi

if ! grep -q "orchestration/mcp-server-correct.js" .mcp.json; then
    echo "‚ùå ERROR: Configuraci√≥n MCP incorrecta"
    exit 1
fi
echo "‚úÖ Configuraciones MCP correctas"

echo ""
echo "üéâ VERIFICACI√ìN DE PATHING COMPLETA - TODO CORRECTO"
echo "=================================================="
echo ""
echo "‚úÖ Archivos cr√≠ticos en ra√≠z preservados"
echo "‚úÖ Orquestador funcionando correctamente"
echo "‚úÖ Agentes y esquemas encontrados"
echo "‚úÖ Archivos movidos a carpetas correctas"
echo "‚úÖ No hay archivos sueltos problem√°ticos"
echo "‚úÖ Tests funcionando"
echo "‚úÖ Quality gate funcionando"
echo "‚úÖ Imports correctos"
echo "‚úÖ Configuraciones MCP correctas"
echo ""
echo "üîí La reorganizaci√≥n no ha causado problemas de pathing"
echo "   Todos los sistemas funcionan correctamente"
