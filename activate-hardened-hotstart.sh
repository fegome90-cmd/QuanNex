#!/usr/bin/env bash
# Activate Hardened Hot Start - Script que activa el sistema endurecido
# Configura todo para que Cursor entre en caliente con validaciones reales

set -euo pipefail

# Colores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

PROJECT_ROOT="/Users/felipe/Developer/startkit-main"

log() {
    echo -e "${BLUE}[ACTIVATE-HARDENED]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

cd "$PROJECT_ROOT"

# Funci√≥n para mostrar banner
showBanner() {
    echo ""
    echo "üõ°Ô∏è =============================================== üõ°Ô∏è"
    echo "   ACTIVAR HARDENED HOT START - SISTEMA ENDURECIDO"
    echo "üõ°Ô∏è =============================================== üõ°Ô∏è"
    echo ""
    echo "üéØ SISTEMA ENDURECIDO CON VALIDACIONES REALES:"
    echo "   ‚úÖ Preflight checks (git, node, puertos, taskdb)"
    echo "   ‚úÖ Idempotencia con sistema de cache"
    echo "   ‚úÖ Logs y artifacts autom√°ticos"
    echo "   ‚úÖ Rehidrataci√≥n de contexto desde snapshots"
    echo "   ‚úÖ Validaciones de rama y commit"
    echo ""
}

# Funci√≥n para verificar componentes endurecidos
verifyHardenedComponents() {
    log "Verificando componentes del sistema endurecido..."
    
    local missing=()
    
    # Verificar archivos cr√≠ticos endurecidos
    local criticalFiles=(
        "contracts/cursor-hotstart-contract.json"
        "agents/hotstart-enforcer/agent.js"
        "scripts/check-ports.sh"
        "scripts/taskdb-health.sh"
        "scripts/validate-hotstart.sh"
        ".cache"
        "MANUAL-COMPLETO-CURSOR.md"
        "CONTEXTO-INGENIERO-SENIOR.md"
    )
    
    for file in "${criticalFiles[@]}"; do
        if [[ ! -e "$file" ]]; then
            missing+=("$file")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        error "Componentes endurecidos faltantes:"
        for file in "${missing[@]}"; do
            echo "  ‚ùå $file"
        done
        return 1
    fi
    
    success "Todos los componentes endurecidos est√°n disponibles"
    return 0
}

# Funci√≥n para configurar permisos endurecidos
setupHardenedPermissions() {
    log "Configurando permisos del sistema endurecido..."
    
    local scripts=(
        "agents/hotstart-enforcer/agent.js"
        "scripts/check-ports.sh"
        "scripts/taskdb-health.sh"
        "scripts/validate-hotstart.sh"
    )
    
    for script in "${scripts[@]}"; do
        if [[ -f "$script" ]]; then
            chmod +x "$script"
            log "Permisos configurados: $script"
        fi
    done
    
    success "Permisos del sistema endurecido configurados"
}

# Funci√≥n para verificar configuraci√≥n MCP endurecida
verifyHardenedMCPConfig() {
    log "Verificando configuraci√≥n MCP endurecida..."
    
    if [[ ! -f ".mcp.json" ]]; then
        error "Archivo .mcp.json no encontrado"
        return 1
    fi
    
    # Verificar que apunta al servidor con inicializaci√≥n endurecida
    if grep -q "mcp-server-with-initialization.js" ".mcp.json"; then
        success "MCP configurado para inicializaci√≥n endurecida"
        return 0
    else
        warning "MCP no est√° configurado para inicializaci√≥n endurecida"
        return 1
    fi
}

# Funci√≥n para probar el sistema endurecido
testHardenedSystem() {
    log "Probando sistema endurecido..."
    
    # Probar agente endurecido
    local testPayload='{"action": "validate"}'
    local result=$(echo "$testPayload" | node agents/hotstart-enforcer/agent.js 2>/dev/null || echo "")
    
    if echo "$result" | grep -q '"success": true'; then
        success "Agente endurecido funcionando"
    else
        error "Agente endurecido no funciona"
        return 1
    fi
    
    # Probar scripts de validaci√≥n
    if bash scripts/validate-hotstart.sh >/dev/null 2>&1; then
        success "Scripts de validaci√≥n funcionando"
    else
        warning "Algunos scripts de validaci√≥n fallan (esto es normal en desarrollo)"
    fi
    
    # Probar context manager endurecido
    if ./context-manager.sh verify >/dev/null 2>&1; then
        success "Context manager endurecido funcionando"
    else
        error "Context manager endurecido no funciona"
        return 1
    fi
    
    return 0
}

# Funci√≥n para mostrar instrucciones finales endurecidas
showHardenedFinalInstructions() {
    echo ""
    echo "‚úÖ =============================================== ‚úÖ"
    echo "   HARDENED HOT START ACTIVADO EXITOSAMENTE"
    echo "‚úÖ =============================================== ‚úÖ"
    echo ""
    echo "üõ°Ô∏è SISTEMA ENDURECIDO CON VALIDACIONES REALES:"
    echo "   1Ô∏è‚É£ Preflight checks: Git, Node.js, puertos, TaskDB"
    echo "   2Ô∏è‚É£ Idempotencia: No relanzar lecturas largas cada sesi√≥n"
    echo "   3Ô∏è‚É£ Logs autom√°ticos: .cache/init.log y .cache/init-result.json"
    echo "   4Ô∏è‚É£ Rehidrataci√≥n: Contexto desde snapshots previos"
    echo "   5Ô∏è‚É£ Validaciones de rama: Solo ramas autorizadas"
    echo ""
    echo "‚è≥ PRIMERA VEZ (ENDURECIDA):"
    echo "   - Validaciones preflight: ~30 segundos"
    echo "   - Lectura de manual: ~3 minutos"
    echo "   - Lectura de contexto: ~2 minutos"
    echo "   - Verificaci√≥n del sistema: ~1 minuto"
    echo "   - Total: ~6 minutos (pero completa y validada)"
    echo ""
    echo "üöÄ SESIONES POSTERIORES:"
    echo "   - Verificaci√≥n de idempotencia: ~5 segundos"
    echo "   - Rehidrataci√≥n desde cache: ~10 segundos"
    echo "   - Total: ~15 segundos (casi instant√°neo)"
    echo ""
    echo "üéØ PR√ìXIMOS PASOS:"
    echo "   1. Inicia MCP QuanNex en Cursor"
    echo "   2. Se ejecutar√° autom√°ticamente el contrato endurecido"
    echo "   3. Espera a que se completen todas las validaciones"
    echo "   4. ¬°Cursor estar√° en hot start con validaciones reales!"
    echo ""
    echo "üîß COMANDOS ENDURECIDOS:"
    echo "   ./scripts/validate-hotstart.sh              # Validaci√≥n completa"
    echo "   ./context-manager.sh verify                 # Verificaci√≥n del sistema"
    echo "   ./context-manager.sh rehydrate --if-exists  # Rehidrataci√≥n desde cache"
    echo "   echo '{\"action\": \"check\"}' | node agents/hotstart-enforcer/agent.js  # Estado"
    echo ""
}

# Funci√≥n principal
main() {
    showBanner
    
    # Verificar componentes endurecidos
    if ! verifyHardenedComponents; then
        error "No se puede activar Hardened Hot Start - componentes faltantes"
        exit 1
    fi
    
    # Configurar permisos endurecidos
    setupHardenedPermissions
    
    # Verificar configuraci√≥n MCP endurecida
    if ! verifyHardenedMCPConfig; then
        warning "MCP no est√° configurado correctamente para sistema endurecido"
        echo "El sistema b√°sico funcionar√°, pero sin validaciones endurecidas"
    fi
    
    # Probar sistema endurecido
    if ! testHardenedSystem; then
        error "Sistema endurecido no est√° funcionando correctamente"
        exit 1
    fi
    
    # Mostrar instrucciones finales endurecidas
    showHardenedFinalInstructions
    
    success "Hardened Hot Start activado exitosamente"
}

# Ejecutar funci√≥n principal
main "$@"
