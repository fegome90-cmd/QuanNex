version: '3.9'

services:
  # PostgreSQL 16 con pgvector para embeddings y metadatos
  postgres:
    image: ankane/pgvector:v0.5.1
    container_name: rag-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PG_USER:-rag_user}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-rag_password}
      POSTGRES_DB: ${PG_DB:-rag_db}
    ports:
      - "${PG_PORT:-5432}:5432"
    volumes:
      - rag-pg-data:/var/lib/postgresql/data
      - ./schema:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER:-rag_user} -d ${PG_DB:-rag_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Qdrant - Vector Database primaria
  qdrant:
    image: qdrant/qdrant:latest
    container_name: rag-qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - rag-qdrant-data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para colas y eventos rápidos
  redis:
    image: redis:7-alpine
    container_name: rag-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - rag-redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Text Embeddings Inference para modelos locales
  tei:
    image: ghcr.io/huggingface/text-embeddings-inference:latest
    container_name: rag-tei
    restart: unless-stopped
    ports:
      - "${TEI_PORT:-8080}:80"
    environment:
      MODEL_ID: BAAI/bge-small-en-v1.5
      MAX_CONCURRENT_REQUESTS: 10
      MAX_BATCH_TOKENS: 8192
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: rag-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - rag-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: rag-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - rag-grafana-data:/var/lib/grafana
      - ./dashboards/grafana:/etc/grafana/provisioning/dashboards
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alertmanager para alertas
  alertmanager:
    image: prom/alertmanager:latest
    container_name: rag-alertmanager
    restart: unless-stopped
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - rag-alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'

  # Node Exporter para métricas del sistema
  node-exporter:
    image: prom/node-exporter:latest
    container_name: rag-node-exporter
    restart: unless-stopped
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # Postgres Exporter para métricas de PostgreSQL
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: rag-postgres-exporter
    restart: unless-stopped
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${PG_USER:-rag_user}:${PG_PASSWORD:-rag_password}@postgres:5432/${PG_DB:-rag_db}?sslmode=disable"

volumes:
  rag-pg-data:
    name: rag-postgres-data
  rag-qdrant-data:
    name: rag-qdrant-data
  rag-redis-data:
    name: rag-redis-data
  rag-prometheus-data:
    name: rag-prometheus-data
  rag-grafana-data:
    name: rag-grafana-data
  rag-alertmanager-data:
    name: rag-alertmanager-data

networks:
  default:
    name: rag-network
