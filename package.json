{
  "name": "claude-project-init-kit",
  "version": "0.2.0",
  "description": "Shell-based project initialization kit for AI-powered development workflows",
  "type": "module",
  "main": "core/claude-project-init.sh",
  "scripts": {
    "start": "node dist/index.js",
    "dev": "node src/index.mjs",
    "build": "tsc -p tsconfig.quannex.json",
    "typecheck": "tsc -p tsconfig.json --noEmit",
    "lint": "eslint . --ext .ts,.tsx,.js,.mjs",
    "lint:fix": "eslint . --ext .ts,.tsx,.js,.mjs --fix",
    "lint:imports": "eslint . --ext .ts,.tsx,.js,.mjs --rule 'import/no-unresolved: error'",
    "format": "prettier --check .",
    "format:fix": "prettier --write .",
    "test": "vitest run",
    "test:cov": "vitest run --coverage",
    "test:ci": "NODE_ENV=ci vitest run --coverage --run",
    "test:e2e": "node scripts/e2e-test.mjs",
    "quality:gate": "node scripts/quality-gate.mjs",
    "gate:coverage": "node scripts/coverage-gate.mjs",
    "gate:metrics": "node scripts/metrics-gate.mjs",
    "gate:metrics:integrity": "node scripts/metrics-integrity.mjs",
    "gate:scan": "node scripts/scan-gate.mjs",
    "gate:policy": "node scripts/policy-check-ast.mjs",
    "gate:policy:legacy": "node scripts/policy-check.mjs",
    "gate:nomock": "node scripts/no-mock-gate.mjs",
    "gate:schema": "node scripts/report-validate.mjs",
    "gate:dirty": "node scripts/anti-tamper.mjs",
    "gate:workflow": "node scripts/workflow-gate.mjs",
    "gate:diff": "node scripts/diff-gate.mjs",
    "gate:config": "node scripts/config-checksum-gate.mjs",
    "dashboard": "node scripts/prometheus-dashboard.mjs",
    "autofix:dry": "node scripts/autofix.mjs '{\"actions\":[],\"dryRun\":true}'",
    "autofix:apply": "node scripts/autofix.mjs '{\"actions\":[],\"dryRun\":false}'",
    "autofix:safe:dry": "node scripts/autofix-safe.mjs '{\"actions\":[],\"dryRun\":true}'",
    "autofix:safe:apply": "SAFE_CLEAN=0 node scripts/autofix-safe.mjs '{\"actions\":[],\"dryRun\":false}'",
    "autofix:v2:dry": "AUTOFIX_V2=1 node scripts/autofix.mjs '{\"actions\":[],\"dryRun\":true}'",
    "autofix:v2:apply": "AUTOFIX_V2=1 node scripts/autofix.mjs '{\"actions\":[],\"dryRun\":false}'",
    "e2e:docker": "bash scripts/e2e-run.sh",
    "e2e:red2green": "node scripts/e2e-autofix-red2green.mjs",
    "e2e:simple": "node scripts/e2e-autofix-simple.mjs",
    "context:compact": "node scripts/context-compact.mjs || echo 'ok'",
    "deps:ensure-node": "node -v && npm -v",
    "deps:ensure-py": "python3 --version || true",
    "deps:baseline": "echo baseline",
    "scaffold:ui": "echo scaffold ui",
    "scaffold:api": "echo scaffold api",
    "test:rtl:setup": "echo rtl",
    "test:api:setup": "echo supertest",
    "test:py:setup": "echo pytest",
    "workflow:adaptive": "node src/workflow/run.mjs",
    "verify:quick": "npm run typecheck && npm run lint",
    "verify:full": "npm run build && npm run test:ci && npm run gates:all",
    "verify": "npm run lint && node scripts/policy-check.mjs",
    "gates:all": "npm run gate:coverage && npm run gate:metrics && npm run gate:metrics:integrity && npm run gate:scan && npm run gate:policy && npm run gate:nomock && npm run gate:schema && npm run gate:dirty && npm run gate:workflow",
    "lint:report": "node scripts/lint-report.mjs",
    "lint:guard": "node scripts/lint-guard.mjs",
    "gates:run": "node tools/gates/gate-runner.mjs .reports/tasks/$TASK.json",
    "gates:demo": "TASK=R-20251003-001 npm run gates:run",
    "quannex:test": "./scripts/acceptance_review.sh",
    "quannex:check": "node dist/cli/quannex-cli.js check --input",
    "quannex:watch": "chokidar '**/*.md' -c 'npm run quannex:check -- {path}'",
    "quannex:publish": "./scripts/publish-report.sh",
    "test:guardrails": "vitest run test/guardrails",
    "test:model-router": "vitest run test/model-router",
    "test:memory": "vitest run test/memory",
    "perf:guardrails": "ts-node ops/perf/perf.guardrails.ts",
    "perf:router": "ts-node ops/perf/perf.router.ts",
    "perf:memory": "ts-node ops/perf/perf.memory.ts",
    "taskdb:report": "node cli/qnx-report.js",
    "taskdb:budget": "node scripts/taskdb-budget.mjs",
    "taskdb:migrate": "npx ts-node ops/migrate/jsonl-to-pg.ts",
    "taskdb:shadow:on": "cross-env TASKDB_DRIVER=dual node scripts/taskdb-shadow-on.mjs",
    "taskdb:metrics": "npx ts-node --esm metrics/exporter.mjs",
    "taskdb:baseline": "node cli/generate-baseline.mjs",
    "taskdb:seed": "node scripts/seed-events.mjs",
    "smoke:taskdb": "node scripts/smoke-taskdb.mjs",
    "taskdb:policy:acceptance": "node packages/tests/policy-versioning-acceptance.test.mjs",
    "report:baseline": "npm run taskdb:baseline",
    "taskdb:dual-check": "node scripts/dual-adapter-check.mjs",
    "taskdb:health": "node scripts/health-quick-check.mjs",
    "taskdb:delta": "node scripts/delta-check.mjs",
    "taskdb:alert": "node scripts/metrics-alert.mjs",
    "ola3:sprint2": "node scripts/ola3-sprint2.mjs",
    "ola3:sprint3": "node scripts/sprint3-observability.mjs",
    "taskdb:always-on": "node scripts/taskdb-always-on.mjs",
    "ci:require-taskdb": "node scripts/ci-require-taskdb.mjs",
    "test:instrumentation": "node packages/tests/instrumentation-acceptance.test.mjs",
    "alert:thresholds": "node scripts/alert-thresholds.mjs",
    "new-function": "./scripts/new-function.sh",
    "daily:monitoring": "./scripts/daily-monitoring.sh",
    "quick:health": "./scripts/quick-health-check.sh",
    "governance:metrics": "node scripts/governance-metrics.mjs",
    "weekly:ops": "node scripts/weekly-ops-issue.mjs",
    "prepush": "npm run verify:quick",
    "audit:bypasses": "node scripts/audit-git-bypasses.mjs",
    "prepare": "husky",
    "test:legacy": "node --test",
    "lint:legacy": "./core/scripts/eslint-check.sh",
    "security": "./core/scripts/security-audit.sh",
    "integration": "./core/scripts/integration-test.sh",
    "test:clean": "node tools/cleanup.mjs",
    "validate": "npm run test && npm run test:clean",
    "plan:build": "node tools/plan-build.mjs",
    "wf:create": "./core/scripts/wf-create.sh",
    "wf:exec": "./core/scripts/wf-exec.sh",
    "wf:status": "node orchestration/orchestrator.js status $(cat .wf_id)",
    "wf:clean": "node orchestration/orchestrator.js cleanup $(cat .wf_id)",
    "agents:validate": "node --test agents/prompting/tests/contract.test.js && node --test agents/context/tests/contract.test.js && node --test agents/rules/tests/contract.test.js",
    "cleanup": "node tools/cleanup.mjs",
    "orchestrate": "npm run plan:build && npm run wf:create && npm run wf:exec",
    "ci:gate1": "make ci-gate1 || npm run ci:report",
    "ci:report": "echo '[CI] Gate1 failed' && exit 1",
    "mcp:contracts": "node tests/agent-contract-tests.mjs",
    "mcp:init": "./scripts/mcp-autonomous-init.sh",
    "mcp:smoke": "bash tests/smoke.sh || echo 'smoke tests not implemented yet'",
    "dast:scan": "./core/scripts/dast-scan-final.sh",
    "dast:basic": "./core/scripts/dast-scan-final.sh -t basic",
    "dast:api": "./core/scripts/dast-scan-final.sh -t api",
    "dast:web": "./core/scripts/dast-scan-final.sh -t web",
    "dast:full": "./core/scripts/dast-scan-final.sh -t full",
    "security:deps": "./core/scripts/security-deps-simple.sh",
    "security:deps:low": "./core/scripts/security-deps-simple.sh -l low",
    "security:deps:moderate": "./core/scripts/security-deps-simple.sh -l moderate",
    "security:deps:high": "./core/scripts/security-deps-simple.sh -l high",
    "security:deps:critical": "./core/scripts/security-deps-simple.sh -l critical",
    "security:aggregate": "./core/scripts/security-report-aggregator.sh",
    "security:full": "npm run security:deps && npm run dast:basic && npm run security:aggregate",
    "autofix:diff": "node tools/preview-diff.mjs > .reports/autofix.diff",
    "autofix:sarif": "node tools/sarif-aggregate.mjs > .reports/security.sarif",
    "modernize": "npm run autofix:dry && npm run autofix:diff && npm run autofix:sarif",
    "modernize:apply": "npm run autofix:apply && npm test && npm run lint && npm run orchestrate",
    "preview:diff": "node tools/preview-diff.mjs > .reports/autofix.diff",
    "sarif:aggregate": "node tools/sarif-aggregate.mjs > .reports/security.sarif",
    "taskdb:init": "node tools/taskdb-kernel.mjs init",
    "taskdb:stats": "node tools/taskdb-kernel.mjs stats",
    "taskdb:export": "node tools/taskdb-kernel.mjs export",
    "taskdb:clear": "node tools/taskdb-kernel.mjs clear",
    "taskdb:migrate:sql-to-json": "node tools/taskdb-migrate.mjs sql-to-json",
    "taskdb:migrate:json-to-sql": "node tools/taskdb-migrate.mjs json-to-sql",
    "taskdb:validate": "node tools/taskdb-migrate.mjs validate",
    "taskdb:test": "node --test tests/taskdb-kernel.test.js",
    "optimization:autofix": "node tools/optimization-autofix-integration.mjs",
    "optimization:autofix:dry": "node tools/optimization-autofix-integration.mjs --dry-run",
    "optimization:autofix:test": "node tools/test-optimization-autofix.mjs",
    "auto:correct": "node tools/auto-correction-engine-v2.mjs",
    "auto:correct:dry": "node tools/auto-correction-engine-v2.mjs --dry-run",
    "auto:correct:test": "node tools/test-auto-correction.mjs",
    "retry:rollback": "node tools/retry-rollback-system-v3.mjs",
    "retry:rollback:test": "node tools/test-retry-rollback.mjs",
    "retry:rollback:legacy": "node tools/retry-rollback-system.mjs",
    "reports:detailed": "node tools/detailed-reports-generator.mjs",
    "reports:html": "node tools/detailed-reports-generator.mjs --output-format html",
    "reports:markdown": "node tools/detailed-reports-generator.mjs --output-format markdown",
    "test:real": "node tools/real-test-runner.mjs",
    "test:real:verbose": "node tools/real-test-runner.mjs --verbose",
    "test:smart": "node tools/smart-test-runner.mjs",
    "test:smart:verbose": "node tools/smart-test-runner.mjs --verbose",
    "repair": "node tools/repair-system.mjs",
    "repair:diagnose": "node tools/repair-system.mjs --diagnose-only",
    "repair:validate": "node tools/repair-system.mjs --validate-only",
    "quannex:init": "./scripts/mcp-autonomous-init.sh",
    "quannex:demo": "node tools/mcp-demo-mode.mjs",
    "quannex:contracts": "npm run test:contracts",
    "quannex:resilience": "npm run test:resilience",
    "quannex:kpis": "node tools/mcp-kpis-collector.mjs",
    "quannex:logs": "node tools/structured-logger.mjs",
    "quannex:semaphore": "node tools/quannex-semaphore.mjs --check",
    "quannex:semaphore:health": "node tools/quannex-semaphore.mjs --health",
    "quannex:semaphore:stabilization": "node tools/quannex-semaphore.mjs --stabilization",
    "quannex:semaphore:plan": "node tools/quannex-semaphore.mjs --plan",
    "quannex:semaphore:commands": "node tools/quannex-semaphore.mjs --commands",
    "quannex:metrics": "node tools/quannex-daily-metrics.mjs --collect",
    "quannex:metrics:report": "node tools/quannex-daily-metrics.mjs --report",
    "quannex:dashboard": "node tools/quannex-dashboard.mjs",
    "quannex:automation": "./scripts/quannex-daily-automation.sh",
    "quannex:automation:dry-run": "./scripts/quannex-daily-automation.sh --dry-run",
    "quannex:automation:verbose": "./scripts/quannex-daily-automation.sh --verbose",
    "quannex:cron:install": "./scripts/setup-cron.sh --install --morning",
    "quannex:cron:uninstall": "./scripts/setup-cron.sh --uninstall",
    "quannex:cron:status": "./scripts/setup-cron.sh --status",
    "quannex:cron:test": "./scripts/setup-cron.sh --test",
    "quannex:readiness": "node tools/readiness-check.mjs",
    "quannex:metrics:generate": "node tools/quannex-metrics-generator.mjs",
    "quannex:auto-optimize": "node tools/quannex-auto-optimizer.mjs",
    "quannex:optimize:performance": "node tools/quannex-performance-optimizer.mjs",
    "mcp:demo": "node tools/mcp-demo-mode.mjs",
    "mcp:resilience": "node tools/mcp-resilience-simple.mjs",
    "mcp:kpis": "node tools/mcp-kpis-collector.mjs",
    "mcp:logs": "node tools/structured-logger.mjs",
    "bench:agents": "node tools/bench-agents.mjs",
    "bench:agents:quick": "node tools/bench-agents.mjs --iterations 5 --warmup 1",
    "bench:agents:full": "node tools/bench-agents.mjs --iterations 20 --warmup 5",
    "bench:metrics": "node tools/bench-metrics.mjs",
    "bench:test": "node --test tests/bench-agents.test.js",
    "integration:init": "node tools/agent-taskdb-integration.mjs init",
    "integration:stats": "node tools/agent-taskdb-integration.mjs stats",
    "integration:test": "node --test tests/agent-taskdb-integration.test.js",
    "integration:cleanup": "node tools/agent-taskdb-integration.mjs cleanup",
    "integration:export": "node tools/agent-taskdb-integration.mjs export",
    "contracts:list": "node tools/agent-taskdb-contracts.mjs list",
    "contracts:validate": "node tools/agent-taskdb-contracts.mjs validate",
    "contracts:example": "node tools/agent-taskdb-contracts.mjs example",
    "contracts:export": "node tools/agent-taskdb-contracts.mjs export",
    "pr-i:analyze": "node tools/mcp-metrics-collector.mjs tools/",
    "pr-i:remediate": "node tools/auto-remediation.mjs tools/",
    "pr-i:dry-run": "node tools/auto-remediation.mjs --dry-run tools/",
    "test:contracts": "node scripts/run-tests.mjs",
    "test:unit": "node --test tests/unit/*.mjs",
    "test:integration": "node --test tests/integration/*.mjs",
    "test:resilience": "node --test tests/resilience/*.mjs",
    "test:perf": "node --test tests/perf/*.mjs",
    "test:security": "node --test tests/security/*.mjs",
    "test:integrity": "node tools/test-integrity.mjs",
    "test:baseline": "node tools/gen-test-baseline.mjs",
    "quannex:smoke": "npm run test:e2e",
    "ci-quannex-gate1": "npm run test:contracts && ./scripts/mcp-autonomous-init.sh && npm run test:e2e",
    "ci-quannex-perf": "node tools/verify-perf.js && node tools/snapshot-perf.js && node --test tests/perf",
    "smoke:test": "node scripts/smoke-test.mjs",
    "test:smoke": "echo smoke test",
    "test:autofix": "echo autofix test",
    "test:safe-success": "echo safe success",
    "test:demo": "echo updated demo test"
  },
  "keywords": [
    "claude",
    "ai",
    "project-init",
    "development",
    "automation"
  ],
  "author": "Claude Project Init Kit Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/fegome90-cmd/startkit.git"
  },
  "engines": {
    "node": ">=20.10.0"
  },
  "overrides": {
    "@vitest/coverage-v8": "^3.2.4",
    "vitest": "^3.2.4"
  },
  "devDependencies": {
    "@babel/parser": "^7.28.4",
    "@babel/traverse": "^7.28.4",
    "@babel/types": "^7.28.4",
    "@eslint/js": "^9.36.0",
    "@stylistic/eslint-plugin": "^2.9.0",
    "@types/express": "^5.0.3",
    "@types/pg": "^8.15.5",
    "@types/sqlite3": "^3.1.11",
    "@types/yargs": "^17.0.33",
    "@typescript-eslint/eslint-plugin": "^8.45.0",
    "@typescript-eslint/parser": "^8.45.0",
    "@vitest/coverage-istanbul": "^3.2.4",
    "@vitest/coverage-v8": "^3.2.4",
    "ajv": "^8.17.1",
    "ajv-formats": "^3.0.1",
    "chokidar-cli": "^3.0.0",
    "eslint": "^9.9.0",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-prettier": "^5.5.4",
    "fs-extra": "^11.2.0",
    "glob": "^11.0.3",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "lint-staged": "^15.2.9",
    "mocha": "^10.2.0",
    "pg": "^8.11.3",
    "prettier": "^3.3.3",
    "semver": "^7.6.3",
    "sqlite3": "^5.1.6",
    "supertest": "^7.1.4",
    "ts-node": "^10.9.1",
    "typescript": "^5.5.4",
    "uuid": "^9.0.1",
    "vitest": "^3.2.4",
    "yaml": "^2.3.4"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.18.2",
    "acorn": "^8.15.0",
    "cross-env": "^10.1.0",
    "express": "^5.1.0",
    "globby": "^15.0.0",
    "minimatch": "^9.0.3",
    "node-fetch": "^3.3.2",
    "prom-client": "^15.1.3",
    "yaml": "^2.8.1",
    "yargs": "^18.0.0",
    "@qdrant/js-client-rest": "^1.7.0",
    "openai": "^4.28.0",
    "cohere-ai": "^7.7.0",
    "tiktoken": "^1.0.10",
    "markdown-it": "^14.0.0",
    "cheerio": "^1.0.0-rc.12",
    "pdf-parse": "^1.1.1",
    "mammoth": "^1.6.0",
    "natural": "^6.10.0",
    "bull": "^4.12.2",
    "ioredis": "^5.3.2",
    "drizzle-orm": "^0.29.0",
    "postgres": "^3.4.3",
    "zod": "^3.22.4",
    "winston": "^3.11.0",
    "pino": "^8.17.2",
    "pino-pretty": "^10.3.1"
  }
}
