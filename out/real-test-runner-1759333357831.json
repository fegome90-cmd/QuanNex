{
  "report_type": "real_test_runner",
  "timestamp": "2025-10-01T15:42:37.831Z",
  "tool_version": "2.0.0",
  "config": {
    "target_path": ".",
    "dry_run": false,
    "backup_enabled": true,
    "verbose": true
  },
  "results": {
    "applied": 0,
    "failed": 0,
    "skipped": 0,
    "total": 0
  },
  "data": {
    "test_files_dir": "./test-files",
    "test_scenarios": [
      "eslint",
      "prettier",
      "console-removal",
      "var-to-const"
    ],
    "test_files_count": 3,
    "total_scenarios": 4,
    "total_tests": 12,
    "successful_tests": 3,
    "failed_tests": 9,
    "test_results": [
      {
        "scenario": "eslint",
        "timestamp": "2025-10-01T15:42:28.374Z",
        "tests": [
          {
            "file": "test-file-1.js",
            "scenario": "eslint",
            "success": false,
            "error": "Comando falló después de 3 intentos: Comando falló: Command failed: npx eslint --fix \"test-files/test-file-1.js\"\nCommand failed: /Users/felipe/Developer/startkit-main/node_modules/.bin/eslint --fix,test-files/test-file-1.js\n",
            "beforeContent": "// Test file for real testing\nconst x = 1;\nconst y = 2;\nconst z = x + y;\n\nconsole.log('Sum:', z);\n\nfunction badFunction() {\n  const temp = 'hello';\n  console.log(temp);\n  return temp;\n}\n\n// Magic numbers\nsetTimeout(function () {\n  console.log('Timeout after 5000ms');\n}, 5000);\n\n// Inconsistent quotes\nconst message = 'Hello world';\nconst other = 'Another message';\n\n// Missing semicolons\nconst a = 1;\nconst b = 2;\n\n// Unused variable\nconst unused = 'not used';\n\nbadFunction();\n",
            "afterContent": "",
            "changes": []
          },
          {
            "file": "test-file-2.js",
            "scenario": "eslint",
            "success": false,
            "error": "Comando falló después de 3 intentos: Comando falló: Command failed: npx eslint --fix \"test-files/test-file-2.js\"\nCommand failed: /Users/felipe/Developer/startkit-main/node_modules/.bin/eslint --fix,test-files/test-file-2.js\n",
            "beforeContent": "// Test file 2 for real testing\nconst data = {\n  name: 'test',\n  value: 42\n};\n\nconsole.log('Data:', data);\n\nfunction processData(input) {\n  const result = input * 2;\n  console.log('Result:', result);\n  return result;\n}\n\n// More magic numbers\nconst timeout = 3000;\nsetTimeout(() => {\n  console.log('Another timeout');\n}, timeout);\n\n// Inconsistent formatting\nconst obj = { a: 1, b: 2, c: 3 };\n\nprocessData(21);\n",
            "afterContent": "",
            "changes": []
          },
          {
            "file": "test-file-3.js",
            "scenario": "eslint",
            "success": false,
            "error": null,
            "beforeContent": "// Test file 3 for real testing\nconst config = {\n  port: 3000,\n  host: 'localhost'\n};\n\nconsole.log('Config:', config);\n\n// Long function that should be refactored\nfunction veryLongFunctionThatDoesTooMuch() {\n  const step1 = 'first step';\n  console.log(step1);\n\n  const step2 = 'second step';\n  console.log(step2);\n\n  const step3 = 'third step';\n  console.log(step3);\n\n  const step4 = 'fourth step';\n  console.log(step4);\n\n  const step5 = 'fifth step';\n  console.log(step5);\n\n  const step6 = 'sixth step';\n  console.log(step6);\n\n  const step7 = 'seventh step';\n  console.log(step7);\n\n  const step8 = 'eighth step';\n  console.log(step8);\n\n  const step9 = 'ninth step';\n  console.log(step9);\n\n  const step10 = 'tenth step';\n  console.log(step10);\n\n  return (\n    step1 +\n    step2 +\n    step3 +\n    step4 +\n    step5 +\n    step6 +\n    step7 +\n    step8 +\n    step9 +\n    step10\n  );\n}\n\n// Magic numbers\nconst delay = 1000;\nsetTimeout(() => {\n  console.log('Delayed execution');\n}, delay);\n\nveryLongFunctionThatDoesTooMuch();\n",
            "afterContent": "// Test file 3 for real testing\nconst config = {\n  port: 3000,\n  host: 'localhost'\n};\n\nconsole.log('Config:', config);\n\n// Long function that should be refactored\nfunction veryLongFunctionThatDoesTooMuch() {\n  const step1 = 'first step';\n  console.log(step1);\n\n  const step2 = 'second step';\n  console.log(step2);\n\n  const step3 = 'third step';\n  console.log(step3);\n\n  const step4 = 'fourth step';\n  console.log(step4);\n\n  const step5 = 'fifth step';\n  console.log(step5);\n\n  const step6 = 'sixth step';\n  console.log(step6);\n\n  const step7 = 'seventh step';\n  console.log(step7);\n\n  const step8 = 'eighth step';\n  console.log(step8);\n\n  const step9 = 'ninth step';\n  console.log(step9);\n\n  const step10 = 'tenth step';\n  console.log(step10);\n\n  return (\n    step1 +\n    step2 +\n    step3 +\n    step4 +\n    step5 +\n    step6 +\n    step7 +\n    step8 +\n    step9 +\n    step10\n  );\n}\n\n// Magic numbers\nconst delay = 1000;\nsetTimeout(() => {\n  console.log('Delayed execution');\n}, delay);\n\nveryLongFunctionThatDoesTooMuch();\n",
            "changes": [
              {
                "type": "modified",
                "line": 6,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 8,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 13,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 16,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 19,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 22,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 25,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 28,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 31,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 34,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 37,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 40,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 54,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 60,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 62,
                "before": "",
                "after": "[ELIMINADA]"
              }
            ]
          }
        ]
      },
      {
        "scenario": "prettier",
        "timestamp": "2025-10-01T15:42:37.070Z",
        "tests": [
          {
            "file": "test-file-1.js",
            "scenario": "prettier",
            "success": true,
            "error": null,
            "beforeContent": "// Test file for real testing\nconst x = 1;\nconst y = 2;\nconst z = x + y;\n\nconsole.log('Sum:', z);\n\nfunction badFunction() {\n  const temp = 'hello';\n  console.log(temp);\n  return temp;\n}\n\n// Magic numbers\nsetTimeout(function() {\n  console.log('Timeout after 5000ms');\n}, 5000);\n\n// Inconsistent quotes\nconst message = 'Hello world';\nconst other = 'Another message';\n\n// Missing semicolons\nconst a = 1;\nconst b = 2;\n\n// Unused variable\nconst unused = 'not used';\n\nbadFunction();\n",
            "afterContent": "// Test file for real testing\nconst x = 1;\nconst y = 2;\nconst z = x + y;\n\nconsole.log('Sum:', z);\n\nfunction badFunction() {\n  const temp = 'hello';\n  console.log(temp);\n  return temp;\n}\n\n// Magic numbers\nsetTimeout(function () {\n  console.log('Timeout after 5000ms');\n}, 5000);\n\n// Inconsistent quotes\nconst message = 'Hello world';\nconst other = 'Another message';\n\n// Missing semicolons\nconst a = 1;\nconst b = 2;\n\n// Unused variable\nconst unused = 'not used';\n\nbadFunction();\n",
            "changes": [
              {
                "type": "modified",
                "line": 5,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 7,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 13,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 15,
                "before": "setTimeout(function() {",
                "after": "setTimeout(function () {"
              },
              {
                "type": "modified",
                "line": 18,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 22,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 26,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 29,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 31,
                "before": "",
                "after": "[ELIMINADA]"
              }
            ]
          },
          {
            "file": "test-file-2.js",
            "scenario": "prettier",
            "success": true,
            "error": null,
            "beforeContent": "// Test file 2 for real testing\nconst data = {\n  name: 'test',\n  value: 42\n};\n\nconsole.log('Data:', data);\n\nfunction processData(input) {\n  const result = input * 2;\n  console.log('Result:', result);\n  return result;\n}\n\n// More magic numbers\nconst timeout = 3000;\nsetTimeout(() => {\n  console.log('Another timeout');\n}, timeout);\n\n// Inconsistent formatting\nconst obj = { a: 1, b: 2, c: 3 };\n\nprocessData(21);\n",
            "afterContent": "// Test file 2 for real testing\nconst data = {\n  name: 'test',\n  value: 42\n};\n\nconsole.log('Data:', data);\n\nfunction processData(input) {\n  const result = input * 2;\n  console.log('Result:', result);\n  return result;\n}\n\n// More magic numbers\nconst timeout = 3000;\nsetTimeout(() => {\n  console.log('Another timeout');\n}, timeout);\n\n// Inconsistent formatting\nconst obj = { a: 1, b: 2, c: 3 };\n\nprocessData(21);\n",
            "changes": [
              {
                "type": "modified",
                "line": 6,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 8,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 14,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 20,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 23,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 25,
                "before": "",
                "after": "[ELIMINADA]"
              }
            ]
          },
          {
            "file": "test-file-3.js",
            "scenario": "prettier",
            "success": true,
            "error": null,
            "beforeContent": "// Test file 3 for real testing\nconst config = {\n  port: 3000,\n  host: 'localhost'\n};\n\nconsole.log('Config:', config);\n\n// Long function that should be refactored\nfunction veryLongFunctionThatDoesTooMuch() {\n  const step1 = 'first step';\n  console.log(step1);\n\n  const step2 = 'second step';\n  console.log(step2);\n\n  const step3 = 'third step';\n  console.log(step3);\n\n  const step4 = 'fourth step';\n  console.log(step4);\n\n  const step5 = 'fifth step';\n  console.log(step5);\n\n  const step6 = 'sixth step';\n  console.log(step6);\n\n  const step7 = 'seventh step';\n  console.log(step7);\n\n  const step8 = 'eighth step';\n  console.log(step8);\n\n  const step9 = 'ninth step';\n  console.log(step9);\n\n  const step10 = 'tenth step';\n  console.log(step10);\n\n  return (\n    step1 +\n    step2 +\n    step3 +\n    step4 +\n    step5 +\n    step6 +\n    step7 +\n    step8 +\n    step9 +\n    step10\n  );\n}\n\n// Magic numbers\nconst delay = 1000;\nsetTimeout(() => {\n  console.log('Delayed execution');\n}, delay);\n\nveryLongFunctionThatDoesTooMuch();\n",
            "afterContent": "// Test file 3 for real testing\nconst config = {\n  port: 3000,\n  host: 'localhost'\n};\n\nconsole.log('Config:', config);\n\n// Long function that should be refactored\nfunction veryLongFunctionThatDoesTooMuch() {\n  const step1 = 'first step';\n  console.log(step1);\n\n  const step2 = 'second step';\n  console.log(step2);\n\n  const step3 = 'third step';\n  console.log(step3);\n\n  const step4 = 'fourth step';\n  console.log(step4);\n\n  const step5 = 'fifth step';\n  console.log(step5);\n\n  const step6 = 'sixth step';\n  console.log(step6);\n\n  const step7 = 'seventh step';\n  console.log(step7);\n\n  const step8 = 'eighth step';\n  console.log(step8);\n\n  const step9 = 'ninth step';\n  console.log(step9);\n\n  const step10 = 'tenth step';\n  console.log(step10);\n\n  return (\n    step1 +\n    step2 +\n    step3 +\n    step4 +\n    step5 +\n    step6 +\n    step7 +\n    step8 +\n    step9 +\n    step10\n  );\n}\n\n// Magic numbers\nconst delay = 1000;\nsetTimeout(() => {\n  console.log('Delayed execution');\n}, delay);\n\nveryLongFunctionThatDoesTooMuch();\n",
            "changes": [
              {
                "type": "modified",
                "line": 6,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 8,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 13,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 16,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 19,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 22,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 25,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 28,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 31,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 34,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 37,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 40,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 54,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 60,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 62,
                "before": "",
                "after": "[ELIMINADA]"
              }
            ]
          }
        ]
      },
      {
        "scenario": "console-removal",
        "timestamp": "2025-10-01T15:42:37.788Z",
        "tests": [
          {
            "file": "test-file-1.js",
            "scenario": "console-removal",
            "success": false,
            "error": null,
            "beforeContent": "// Test file for real testing\nconst x = 1;\nconst y = 2;\nconst z = x + y;\n\nconsole.log('Sum:', z);\n\nfunction badFunction() {\n  const temp = 'hello';\n  console.log(temp);\n  return temp;\n}\n\n// Magic numbers\nsetTimeout(function () {\n  console.log('Timeout after 5000ms');\n}, 5000);\n\n// Inconsistent quotes\nconst message = 'Hello world';\nconst other = 'Another message';\n\n// Missing semicolons\nconst a = 1;\nconst b = 2;\n\n// Unused variable\nconst unused = 'not used';\n\nbadFunction();\n",
            "afterContent": "// Test file for real testing\nconst x = 1;\nconst y = 2;\nconst z = x + y;\n\nconsole.log('Sum:', z);\n\nfunction badFunction() {\n  const temp = 'hello';\n  console.log(temp);\n  return temp;\n}\n\n// Magic numbers\nsetTimeout(function () {\n  console.log('Timeout after 5000ms');\n}, 5000);\n\n// Inconsistent quotes\nconst message = 'Hello world';\nconst other = 'Another message';\n\n// Missing semicolons\nconst a = 1;\nconst b = 2;\n\n// Unused variable\nconst unused = 'not used';\n\nbadFunction();\n",
            "changes": [
              {
                "type": "modified",
                "line": 5,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 7,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 13,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 18,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 22,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 26,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 29,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 31,
                "before": "",
                "after": "[ELIMINADA]"
              }
            ]
          },
          {
            "file": "test-file-2.js",
            "scenario": "console-removal",
            "success": false,
            "error": null,
            "beforeContent": "// Test file 2 for real testing\nconst data = {\n  name: 'test',\n  value: 42\n};\n\nconsole.log('Data:', data);\n\nfunction processData(input) {\n  const result = input * 2;\n  console.log('Result:', result);\n  return result;\n}\n\n// More magic numbers\nconst timeout = 3000;\nsetTimeout(() => {\n  console.log('Another timeout');\n}, timeout);\n\n// Inconsistent formatting\nconst obj = { a: 1, b: 2, c: 3 };\n\nprocessData(21);\n",
            "afterContent": "// Test file 2 for real testing\nconst data = {\n  name: 'test',\n  value: 42\n};\n\nconsole.log('Data:', data);\n\nfunction processData(input) {\n  const result = input * 2;\n  console.log('Result:', result);\n  return result;\n}\n\n// More magic numbers\nconst timeout = 3000;\nsetTimeout(() => {\n  console.log('Another timeout');\n}, timeout);\n\n// Inconsistent formatting\nconst obj = { a: 1, b: 2, c: 3 };\n\nprocessData(21);\n",
            "changes": [
              {
                "type": "modified",
                "line": 6,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 8,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 14,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 20,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 23,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 25,
                "before": "",
                "after": "[ELIMINADA]"
              }
            ]
          },
          {
            "file": "test-file-3.js",
            "scenario": "console-removal",
            "success": false,
            "error": null,
            "beforeContent": "// Test file 3 for real testing\nconst config = {\n  port: 3000,\n  host: 'localhost'\n};\n\nconsole.log('Config:', config);\n\n// Long function that should be refactored\nfunction veryLongFunctionThatDoesTooMuch() {\n  const step1 = 'first step';\n  console.log(step1);\n\n  const step2 = 'second step';\n  console.log(step2);\n\n  const step3 = 'third step';\n  console.log(step3);\n\n  const step4 = 'fourth step';\n  console.log(step4);\n\n  const step5 = 'fifth step';\n  console.log(step5);\n\n  const step6 = 'sixth step';\n  console.log(step6);\n\n  const step7 = 'seventh step';\n  console.log(step7);\n\n  const step8 = 'eighth step';\n  console.log(step8);\n\n  const step9 = 'ninth step';\n  console.log(step9);\n\n  const step10 = 'tenth step';\n  console.log(step10);\n\n  return (\n    step1 +\n    step2 +\n    step3 +\n    step4 +\n    step5 +\n    step6 +\n    step7 +\n    step8 +\n    step9 +\n    step10\n  );\n}\n\n// Magic numbers\nconst delay = 1000;\nsetTimeout(() => {\n  console.log('Delayed execution');\n}, delay);\n\nveryLongFunctionThatDoesTooMuch();\n",
            "afterContent": "// Test file 3 for real testing\nconst config = {\n  port: 3000,\n  host: 'localhost'\n};\n\nconsole.log('Config:', config);\n\n// Long function that should be refactored\nfunction veryLongFunctionThatDoesTooMuch() {\n  const step1 = 'first step';\n  console.log(step1);\n\n  const step2 = 'second step';\n  console.log(step2);\n\n  const step3 = 'third step';\n  console.log(step3);\n\n  const step4 = 'fourth step';\n  console.log(step4);\n\n  const step5 = 'fifth step';\n  console.log(step5);\n\n  const step6 = 'sixth step';\n  console.log(step6);\n\n  const step7 = 'seventh step';\n  console.log(step7);\n\n  const step8 = 'eighth step';\n  console.log(step8);\n\n  const step9 = 'ninth step';\n  console.log(step9);\n\n  const step10 = 'tenth step';\n  console.log(step10);\n\n  return (\n    step1 +\n    step2 +\n    step3 +\n    step4 +\n    step5 +\n    step6 +\n    step7 +\n    step8 +\n    step9 +\n    step10\n  );\n}\n\n// Magic numbers\nconst delay = 1000;\nsetTimeout(() => {\n  console.log('Delayed execution');\n}, delay);\n\nveryLongFunctionThatDoesTooMuch();\n",
            "changes": [
              {
                "type": "modified",
                "line": 6,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 8,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 13,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 16,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 19,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 22,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 25,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 28,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 31,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 34,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 37,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 40,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 54,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 60,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 62,
                "before": "",
                "after": "[ELIMINADA]"
              }
            ]
          }
        ]
      },
      {
        "scenario": "var-to-const",
        "timestamp": "2025-10-01T15:42:37.811Z",
        "tests": [
          {
            "file": "test-file-1.js",
            "scenario": "var-to-const",
            "success": false,
            "error": null,
            "beforeContent": "// Test file for real testing\nconst x = 1;\nconst y = 2;\nconst z = x + y;\n\nconsole.log('Sum:', z);\n\nfunction badFunction() {\n  const temp = 'hello';\n  console.log(temp);\n  return temp;\n}\n\n// Magic numbers\nsetTimeout(function () {\n  console.log('Timeout after 5000ms');\n}, 5000);\n\n// Inconsistent quotes\nconst message = 'Hello world';\nconst other = 'Another message';\n\n// Missing semicolons\nconst a = 1;\nconst b = 2;\n\n// Unused variable\nconst unused = 'not used';\n\nbadFunction();\n",
            "afterContent": "// Test file for real testing\nconst x = 1;\nconst y = 2;\nconst z = x + y;\n\nconsole.log('Sum:', z);\n\nfunction badFunction() {\n  const temp = 'hello';\n  console.log(temp);\n  return temp;\n}\n\n// Magic numbers\nsetTimeout(function () {\n  console.log('Timeout after 5000ms');\n}, 5000);\n\n// Inconsistent quotes\nconst message = 'Hello world';\nconst other = 'Another message';\n\n// Missing semicolons\nconst a = 1;\nconst b = 2;\n\n// Unused variable\nconst unused = 'not used';\n\nbadFunction();\n",
            "changes": [
              {
                "type": "modified",
                "line": 5,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 7,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 13,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 18,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 22,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 26,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 29,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 31,
                "before": "",
                "after": "[ELIMINADA]"
              }
            ]
          },
          {
            "file": "test-file-2.js",
            "scenario": "var-to-const",
            "success": false,
            "error": null,
            "beforeContent": "// Test file 2 for real testing\nconst data = {\n  name: 'test',\n  value: 42\n};\n\nconsole.log('Data:', data);\n\nfunction processData(input) {\n  const result = input * 2;\n  console.log('Result:', result);\n  return result;\n}\n\n// More magic numbers\nconst timeout = 3000;\nsetTimeout(() => {\n  console.log('Another timeout');\n}, timeout);\n\n// Inconsistent formatting\nconst obj = { a: 1, b: 2, c: 3 };\n\nprocessData(21);\n",
            "afterContent": "// Test file 2 for real testing\nconst data = {\n  name: 'test',\n  value: 42\n};\n\nconsole.log('Data:', data);\n\nfunction processData(input) {\n  const result = input * 2;\n  console.log('Result:', result);\n  return result;\n}\n\n// More magic numbers\nconst timeout = 3000;\nsetTimeout(() => {\n  console.log('Another timeout');\n}, timeout);\n\n// Inconsistent formatting\nconst obj = { a: 1, b: 2, c: 3 };\n\nprocessData(21);\n",
            "changes": [
              {
                "type": "modified",
                "line": 6,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 8,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 14,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 20,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 23,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 25,
                "before": "",
                "after": "[ELIMINADA]"
              }
            ]
          },
          {
            "file": "test-file-3.js",
            "scenario": "var-to-const",
            "success": false,
            "error": null,
            "beforeContent": "// Test file 3 for real testing\nconst config = {\n  port: 3000,\n  host: 'localhost'\n};\n\nconsole.log('Config:', config);\n\n// Long function that should be refactored\nfunction veryLongFunctionThatDoesTooMuch() {\n  const step1 = 'first step';\n  console.log(step1);\n\n  const step2 = 'second step';\n  console.log(step2);\n\n  const step3 = 'third step';\n  console.log(step3);\n\n  const step4 = 'fourth step';\n  console.log(step4);\n\n  const step5 = 'fifth step';\n  console.log(step5);\n\n  const step6 = 'sixth step';\n  console.log(step6);\n\n  const step7 = 'seventh step';\n  console.log(step7);\n\n  const step8 = 'eighth step';\n  console.log(step8);\n\n  const step9 = 'ninth step';\n  console.log(step9);\n\n  const step10 = 'tenth step';\n  console.log(step10);\n\n  return (\n    step1 +\n    step2 +\n    step3 +\n    step4 +\n    step5 +\n    step6 +\n    step7 +\n    step8 +\n    step9 +\n    step10\n  );\n}\n\n// Magic numbers\nconst delay = 1000;\nsetTimeout(() => {\n  console.log('Delayed execution');\n}, delay);\n\nveryLongFunctionThatDoesTooMuch();\n",
            "afterContent": "// Test file 3 for real testing\nconst config = {\n  port: 3000,\n  host: 'localhost'\n};\n\nconsole.log('Config:', config);\n\n// Long function that should be refactored\nfunction veryLongFunctionThatDoesTooMuch() {\n  const step1 = 'first step';\n  console.log(step1);\n\n  const step2 = 'second step';\n  console.log(step2);\n\n  const step3 = 'third step';\n  console.log(step3);\n\n  const step4 = 'fourth step';\n  console.log(step4);\n\n  const step5 = 'fifth step';\n  console.log(step5);\n\n  const step6 = 'sixth step';\n  console.log(step6);\n\n  const step7 = 'seventh step';\n  console.log(step7);\n\n  const step8 = 'eighth step';\n  console.log(step8);\n\n  const step9 = 'ninth step';\n  console.log(step9);\n\n  const step10 = 'tenth step';\n  console.log(step10);\n\n  return (\n    step1 +\n    step2 +\n    step3 +\n    step4 +\n    step5 +\n    step6 +\n    step7 +\n    step8 +\n    step9 +\n    step10\n  );\n}\n\n// Magic numbers\nconst delay = 1000;\nsetTimeout(() => {\n  console.log('Delayed execution');\n}, delay);\n\nveryLongFunctionThatDoesTooMuch();\n",
            "changes": [
              {
                "type": "modified",
                "line": 6,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 8,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 13,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 16,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 19,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 22,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 25,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 28,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 31,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 34,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 37,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 40,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 54,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 60,
                "before": "",
                "after": "[ELIMINADA]"
              },
              {
                "type": "modified",
                "line": 62,
                "before": "",
                "after": "[ELIMINADA]"
              }
            ]
          }
        ]
      }
    ]
  }
}