name: DAST Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar escaneo de seguridad diariamente a las 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL objetivo para escaneo DAST'
        required: true
        default: 'https://httpbin.org'
      scan_type:
        description: 'Tipo de escaneo'
        required: true
        default: 'basic'
        type: choice
        options:
          - basic
          - api
          - web
          - full
      audit_level:
        description: 'Nivel de auditor√≠a de dependencias'
        required: true
        default: 'moderate'
        type: choice
        options:
          - low
          - moderate
          - high
          - critical

jobs:
  dast-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18, 20, 22]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for gitleaks
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install security tools
        run: |
          # Install gitleaks
          wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
          chmod +x /usr/local/bin/gitleaks
          
          # Install trivy (if available)
          wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          
          # Install safety for Python dependencies (if needed)
          pip install safety
      
      - name: Run DAST scan
        run: |
          TARGET_URL="${{ github.event.inputs.target_url || 'https://httpbin.org' }}"
          SCAN_TYPE="${{ github.event.inputs.scan_type || 'basic' }}"
          
          echo "üîç Ejecutando DAST scan en $TARGET_URL (tipo: $SCAN_TYPE)"
          ./scripts/dast-scan.sh -t "$SCAN_TYPE" -v "$TARGET_URL"
        continue-on-error: true
      
      - name: Run security dependencies scan
        run: |
          AUDIT_LEVEL="${{ github.event.inputs.audit_level || 'moderate' }}"
          
          echo "üîí Ejecutando escaneo de dependencias de seguridad (nivel: $AUDIT_LEVEL)"
          ./scripts/security-deps-scan.sh -l "$AUDIT_LEVEL" -v
        continue-on-error: true
      
      - name: Run npm audit
        run: |
          echo "üì¶ Ejecutando npm audit"
          npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Run gitleaks
        run: |
          echo "üîç Ejecutando gitleaks para detectar secretos"
          gitleaks detect --source . --report-format json --no-git > .reports/gitleaks-report.json || true
        continue-on-error: true
      
      - name: Run trivy filesystem scan
        run: |
          echo "üõ°Ô∏è Ejecutando trivy filesystem scan"
          trivy fs --format json --output .reports/trivy-fs-report.json . || true
        continue-on-error: true
      
      - name: Generate security summary
        run: |
          echo "üìä Generando resumen de seguridad"
          mkdir -p .reports
          
          # Combinar reportes en un resumen
          cat > .reports/security-summary.json << EOF
          {
            "scan_info": {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "workflow_run": "${{ github.run_id }}",
              "node_version": "${{ matrix.node }}",
              "target_url": "${{ github.event.inputs.target_url || 'https://httpbin.org' }}",
              "scan_type": "${{ github.event.inputs.scan_type || 'basic' }}",
              "audit_level": "${{ github.event.inputs.audit_level || 'moderate' }}"
            },
            "tools_executed": [
              "dast-scan",
              "security-deps-scan", 
              "npm-audit",
              "gitleaks",
              "trivy"
            ],
            "reports": {
              "dast": "$(ls .reports/dast-*.json 2>/dev/null | tail -1 || echo 'null')",
              "security_deps": "$(ls .reports/security-*.json 2>/dev/null | tail -1 || echo 'null')",
              "gitleaks": ".reports/gitleaks-report.json",
              "trivy": ".reports/trivy-fs-report.json"
            }
          }
          EOF
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-node-${{ matrix.node }}-${{ github.run_id }}
          path: .reports/
          retention-days: 30
      
      - name: Comment security results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Leer resumen de seguridad
            let summary = {};
            try {
              const summaryPath = '.reports/security-summary.json';
              if (fs.existsSync(summaryPath)) {
                summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
              }
            } catch (e) {
              console.log('No se pudo leer el resumen de seguridad');
            }
            
            // Generar comentario
            let comment = '## üîí Security Scan Results\n\n';
            comment += `**Node Version:** ${summary.scan_info?.node_version || 'N/A'}\n`;
            comment += `**Target URL:** ${summary.scan_info?.target_url || 'N/A'}\n`;
            comment += `**Scan Type:** ${summary.scan_info?.scan_type || 'N/A'}\n`;
            comment += `**Audit Level:** ${summary.scan_info?.audit_level || 'N/A'}\n\n`;
            
            comment += '### Tools Executed\n';
            comment += summary.tools_executed?.map(tool => `- ‚úÖ ${tool}`).join('\n') || 'No tools executed';
            comment += '\n\n';
            
            comment += '### Reports Generated\n';
            comment += 'Security reports have been uploaded as artifacts.\n';
            comment += 'Check the "Artifacts" section in the Actions tab to download detailed reports.\n\n';
            
            comment += '---\n';
            comment += '*This comment was automatically generated by the DAST Security Testing workflow.*';
            
            // Comentar en el PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Fail on critical security issues
        run: |
          echo "üö® Verificando issues cr√≠ticos de seguridad"
          
          # Verificar si hay reportes de DAST
          if ls .reports/dast-*.json 1> /dev/null 2>&1; then
            DAST_REPORT=$(ls .reports/dast-*.json | tail -1)
            HIGH_FINDINGS=$(jq -r '.summary.high_severity // 0' "$DAST_REPORT")
            if [[ "$HIGH_FINDINGS" -gt 0 ]]; then
              echo "‚ùå Se encontraron $HIGH_FINDINGS vulnerabilidades de alta severidad en DAST"
              exit 1
            fi
          fi
          
          # Verificar si hay reportes de dependencias
          if ls .reports/security-*.json 1> /dev/null 2>&1; then
            DEPS_REPORT=$(ls .reports/security-*.json | tail -1)
            CRITICAL_FINDINGS=$(jq -r '.summary.critical_severity // 0' "$DEPS_REPORT")
            HIGH_FINDINGS=$(jq -r '.summary.high_severity // 0' "$DEPS_REPORT")
            if [[ "$CRITICAL_FINDINGS" -gt 0 || "$HIGH_FINDINGS" -gt 0 ]]; then
              echo "‚ùå Se encontraron $CRITICAL_FINDINGS vulnerabilidades cr√≠ticas y $HIGH_FINDINGS altas en dependencias"
              exit 1
            fi
          fi
          
          echo "‚úÖ No se encontraron issues cr√≠ticos de seguridad"
