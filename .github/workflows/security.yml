name: Seguridad Base

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 3 * * 2' # Martes a las 3 AM UTC

jobs:
  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para Gitleaks

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: Auditor√≠a de dependencias (npm audit)
        run: |
          echo "üîí Ejecutando auditor√≠a de dependencias..."
          npm audit --audit-level=high --json > .reports/npm-audit.json || true

          # Verificar si hay vulnerabilidades cr√≠ticas
          HIGH_COUNT=$(npm audit --audit-level=high --json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_COUNT=$(npm audit --audit-level=high --json | jq '.metadata.vulnerabilities.critical // 0')

          echo "Vulnerabilidades encontradas:"
          echo "  - High: $HIGH_COUNT"
          echo "  - Critical: $CRITICAL_COUNT"

          if [ "$HIGH_COUNT" -gt 0 ] || [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Se encontraron vulnerabilidades High/Critical"
            exit 1
          else
            echo "‚úÖ No se encontraron vulnerabilidades High/Critical"
          fi

      - name: OSV Scanner
        run: |
          echo "üîç Ejecutando OSV Scanner..."
          # Instalar OSV Scanner
          curl -L https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner
          sudo mv osv-scanner /usr/local/bin/

          # Ejecutar escaneo
          osv-scanner --format=json --output=.reports/osv-report.json . || true
        continue-on-error: true

      - name: Gitleaks - Detecci√≥n de secretos
        uses: gitleaks/gitleaks-action@v2
        with:
          redact: true
          verbose: true
          format: json
          output: .reports/gitleaks.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verificar archivos de configuraci√≥n de seguridad
        run: |
          echo "üîç Verificando configuraci√≥n de seguridad..."

          # Verificar que no hay im√°genes Docker con :latest
          if grep -r "FROM.*:latest" . --include="Dockerfile*" --include="docker-compose*.yml"; then
            echo "‚ùå Se encontraron im√°genes Docker con :latest"
            exit 1
          fi

          # Verificar que hay USER no-root en Dockerfiles
          if find . -name "Dockerfile*" -exec grep -L "USER" {} \; | grep -v "^$"; then
            echo "‚ö†Ô∏è Algunos Dockerfiles no tienen USER no-root"
          fi

          # Verificar que hay HEALTHCHECK en Dockerfiles
          if find . -name "Dockerfile*" -exec grep -L "HEALTHCHECK" {} \; | grep -v "^$"; then
            echo "‚ö†Ô∏è Algunos Dockerfiles no tienen HEALTHCHECK"
          fi

          echo "‚úÖ Verificaci√≥n de configuraci√≥n completada"

      - name: Subir artefactos de seguridad
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_number }}
          path: .reports/
          retention-days: 30

      - name: Comentar PR con resumen de seguridad
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## üîí Resumen de Seguridad\n\n';

            // Leer reporte de npm audit
            if (fs.existsSync('.reports/npm-audit.json')) {
              const auditData = JSON.parse(fs.readFileSync('.reports/npm-audit.json', 'utf8'));
              const vulns = auditData.metadata?.vulnerabilities || {};
              
              comment += `**Vulnerabilidades de dependencias:**\n`;
              comment += `- Info: ${vulns.info || 0}\n`;
              comment += `- Low: ${vulns.low || 0}\n`;
              comment += `- Moderate: ${vulns.moderate || 0}\n`;
              comment += `- High: ${vulns.high || 0}\n`;
              comment += `- Critical: ${vulns.critical || 0}\n\n`;
            }

            // Leer reporte de Gitleaks
            if (fs.existsSync('.reports/gitleaks.json')) {
              const gitleaksData = JSON.parse(fs.readFileSync('.reports/gitleaks.json', 'utf8'));
              comment += `**Secretos detectados:** ${gitleaksData.length || 0}\n\n`;
            }

            comment += `üìä [Ver artefactos completos](${context.payload.pull_request.html_url}/checks)`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
