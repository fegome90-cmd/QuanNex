name: opa-policy-check (container-run)
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  actions: read
  security-events: write

concurrency:
  group: opa-dkrun-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  opa:
    runs-on: ubuntu-latest
    timeout-minutes: 6

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Diagnostics
        run: |
          echo "🔍 Diagnóstico del entorno:"
          echo "whoami: $(whoami)"
          which git || echo "❌ git missing"
          git --version || true
          which jq || echo "❌ jq missing"
          jq --version || true
          which docker || echo "❌ docker missing"
          docker --version || true
          echo "📁 Contenido del directorio:"
          ls -la
          echo "✅ Diagnóstico completado"

      - name: Build OPA input (labels + changed files)
        id: build-input
        shell: bash
        run: |
          set -euo pipefail
          base="${{ github.event.pull_request.base.sha }}"
          head="${{ github.event.pull_request.head.sha }}"
          git diff --name-status -M90 "$base" "$head" > diff.txt
          jq -nc \
            --argjson labels '${{ toJson(github.event.pull_request.labels) }}' \
            --arg files "$(awk '{print $2"\n"$3}' diff.txt | sed '/^$/d' | sort -u | tr '\n' ' ')" \
            --arg deleted "$(awk '$1=="D"{print $2}' diff.txt | tr '\n' ' ')" \
            '{
              labels: ( $labels | if .=="" then [] else (fromjson|map(.name)) end ),
              files: ( $files | split(" ") | map(select(length>0)) ),
              deleted_files: ( $deleted | split(" ") | map(select(length>0)) )
            }' > input.json

      - name: Cargar data externa (umbrales/paths)
        run: |
          test -f policies/data.yaml && echo "Data externa OK" || echo "⚠️ data.yaml no encontrada (usando defaults)"

      - name: Evaluate Rego via container (OPA 0.58.0)
        shell: bash
        env: { PLAN: "Container" }
        run: |
          set -euo pipefail
          echo "🔍 Evaluando con defaults via contenedor..."
          docker run --rm \
            -v "$PWD":/work -w /work \
            openpolicyagent/opa:0.58.0 \
            eval --format=json -i input.json -d policies/ 'data.pr.deny' > eval.json
          jq -r '.result[0].expressions[0].value[]?' eval.json > violations.txt || true
          if [ -s violations.txt ]; then
            cat violations.txt; exit 1; fi
          echo "OPA (container) OK: no violations."

      - name: Comment violations on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const lines = fs.readFileSync('violations.txt','utf8').split('\n').filter(Boolean);
            const body = `❌ **Política PR (Container)**\n\n` + lines.map(l=>`- ${l}`).join('\n');
            github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body });
