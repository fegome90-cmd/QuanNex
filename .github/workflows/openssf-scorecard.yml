name: openssf-scorecard
on:
  schedule: [{cron: "0 6 * * 1"}]  # Lunes 06:00
  workflow_dispatch:

jobs:
  scorecard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run OpenSSF Scorecard
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true
      
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
      
      - name: Check Scorecard Score
        run: |
          echo "üìä Verificando score de OpenSSF Scorecard..."
          
          # Verificar que el archivo SARIF existe
          if [ ! -f "results.sarif" ]; then
            echo "‚ùå Archivo SARIF no encontrado"
            exit 1
          fi
          
          # Extraer score del archivo SARIF
          SCORE=$(jq -r '.runs[0].results[] | select(.ruleId == "ScorecardScore") | .message.text' results.sarif | grep -o '[0-9]\+' | head -1)
          
          if [ -z "$SCORE" ]; then
            echo "‚ö†Ô∏è  No se pudo extraer el score del SARIF"
            echo "Contenido del SARIF:"
            head -20 results.sarif
            exit 0  # No fallar si no se puede extraer el score
          fi
          
          echo "üìà Scorecard Score: $SCORE/10"
          
          # Verificar que el score sea ‚â•7/10
          if [ "$SCORE" -lt 7 ]; then
            echo "‚ùå Scorecard score $SCORE < 7/10"
            echo "::error::OpenSSF Scorecard score $SCORE/10 es menor al objetivo de 7/10"
            echo "::error::Revisar y mejorar la seguridad del repositorio"
            exit 1
          else
            echo "‚úÖ Scorecard score: $SCORE/10 (objetivo cumplido)"
          fi
      
      - name: Generate Scorecard Report
        run: |
          echo "üìã Generando reporte de Scorecard..."
          
          # Crear directorio de reportes si no existe
          mkdir -p .reports/security
          
          # Generar reporte en markdown
          REPORT_FILE=".reports/security/scorecard-$(date +%Y%m%d-%H%M%S).md"
          
          cat > "$REPORT_FILE" << EOF
          # üìä OpenSSF Scorecard Report - $(date)
          
          **Fecha**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **Score**: $SCORE/10
          **Estado**: $([ "$SCORE" -ge 7 ] && echo "‚úÖ CUMPLE" || echo "‚ùå NO CUMPLE")
          
          ## üìà M√©tricas de Seguridad
          
          EOF
          
          # Extraer m√©tricas espec√≠ficas del SARIF
          if [ -f "results.sarif" ]; then
            echo "### Detalles del Scorecard" >> "$REPORT_FILE"
            echo "" >> "$REPORT_FILE"
            echo '```json' >> "$REPORT_FILE"
            jq -r '.runs[0].results[] | select(.ruleId | startswith("Scorecard")) | "\(.ruleId): \(.message.text)"' results.sarif >> "$REPORT_FILE"
            echo '```' >> "$REPORT_FILE"
            echo "" >> "$REPORT_FILE"
          fi
          
          cat >> "$REPORT_FILE" << EOF
          ## üéØ Objetivos
          
          - **Score m√≠nimo**: ‚â•7/10
          - **Frecuencia**: Semanal (lunes)
          - **Acci√≥n**: Bloquear si score <7
          
          ## üìã Pr√≥ximos Pasos
          
          $([ "$SCORE" -ge 7 ] && echo "- ‚úÖ Score objetivo cumplido" || echo "- üîß Mejorar score de seguridad")
          - üìÖ Revisar m√©tricas semanalmente
          - üîÑ Actualizar pol√≠ticas seg√∫n sea necesario
          
          ---
          **Generado**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **Workflow**: openssf-scorecard
          EOF
          
          echo "üìÑ Reporte generado: $REPORT_FILE"
      
      - name: Scorecard Summary
        run: |
          echo "üìä RESUMEN DE SCORECARD:"
          echo "========================"
          echo "Score: $SCORE/10"
          echo "Estado: $([ "$SCORE" -ge 7 ] && echo "‚úÖ CUMPLE OBJETIVO" || echo "‚ùå NO CUMPLE OBJETIVO")"
          echo "Fecha: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo ""
          echo "üéØ Objetivo: ‚â•7/10"
          echo "üìÖ Pr√≥xima ejecuci√≥n: Lunes 06:00 UTC"
