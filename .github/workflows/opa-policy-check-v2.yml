name: opa-policy-check (pinned)
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  actions: read
  security-events: write

concurrency:
  group: opa-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  opa:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Cache OPA binary
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/opa
          key: opa-bin-${{ runner.os }}-0.58.0

      - name: Install OPA (checksum + retries)
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        env:
          OPA_VER: "0.58.0"
        run: |
          set -euo pipefail
          OS=linux ARCH=amd64
          url="https://github.com/open-policy-agent/opa/releases/download/v${OPA_VER}/opa_${OS}_${ARCH}_v${OPA_VER}.tar.gz"
          shas="https://github.com/open-policy-agent/opa/releases/download/v${OPA_VER}/checksums.txt"

          for attempt in 1 2 3; do
            echo "Download attempt $attempt…"
            curl -fsSL "$url" -o opa.tgz && curl -fsSL "$shas" -o checksums.txt && break || sleep $((2**attempt))
          done

          grep "opa_${OS}_${ARCH}_v${OPA_VER}.tar.gz" checksums.txt | sha256sum -c -
          tar -xzf opa.tgz opa
          sudo install -m 0755 opa /usr/local/bin/opa
          opa version
      
      - name: Build OPA input (labels + changed files)
        id: build-input
        shell: bash
        run: |
          set -euo pipefail
          base="${{ github.event.pull_request.base.sha }}"
          head="${{ github.event.pull_request.head.sha }}"
          git diff --name-status -M90 "$base" "$head" > diff.txt
          jq -nc \
            --argjson labels '${{ toJson(github.event.pull_request.labels) }}' \
            --arg files "$(awk '{print $2"\n"$3}' diff.txt | sed '/^$/d' | sort -u | tr '\n' ' ')" \
            --arg deleted "$(awk '$1=="D"{print $2}' diff.txt | tr '\n' ' ')" \
            '{
              labels: ( $labels | if .=="" then [] else (fromjson|map(.name)) end ),
              files: ( $files | split(" ") | map(select(length>0)) ),
              deleted_files: ( $deleted | split(" ") | map(select(length>0)) )
            }' > input.json
          echo "files=$(jq '.files|length' input.json)"
      
      - name: Cargar data externa (umbrales/paths)
        run: |
          test -f policies/data.yaml && echo "Data externa OK" || echo "⚠️ data.yaml no encontrada (usando defaults)"
      
      - name: Evaluate Rego con data externa
        shell: bash
        run: |
          set -euo pipefail
          if [ -f policies/data.yaml ]; then
            echo "🔍 Evaluando con data externa..."
            opa eval --format=json -i input.json -d policies/ -d policies/data.yaml 'data.pr.deny' > eval.json
          else
            echo "🔍 Evaluando con defaults..."
            opa eval --format=json -i input.json -d policies/ 'data.pr.deny' > eval.json
          fi
          jq -r '.result[0].expressions[0].value[]?' eval.json > violations.txt || true
          if [ -s violations.txt ]; then
            echo "Violations:"
            cat violations.txt
            exit 1
          fi
          echo "OPA OK: no violations."
      
      - name: Comment violations on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = process.env.PLAN || "OPA";
            const lines = fs.readFileSync('violations.txt','utf8').split('\n').filter(Boolean);
            const body = `❌ **Política PR (${plan})**\n\n` + lines.map(l=>`- ${l}`).join('\n');
            github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body });
        env:
          PLAN: "Pinned"
