name: opa-policy-check-v2
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  policy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install OPA (Alternative Method)
        run: |
          # Usar el m√©todo m√°s confiable: descarga directa desde releases
          OPA_VERSION="0.58.0"  # Versi√≥n espec√≠fica para evitar problemas
          wget -O opa "https://github.com/openpolicyagent/opa/releases/download/v${OPA_VERSION}/opa_linux_amd64"
          chmod +x opa
          sudo mv opa /usr/local/bin/
          
          # Verificar instalaci√≥n
          opa version
      
      - name: Prepare PR Data
        id: pr-data
        run: |
          # Obtener archivos cambiados
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | jq -R -s -c 'split("\n")[:-1]')
          
          # Obtener labels
          LABELS=$(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[].name' | jq -R -s -c 'split("\n")[:-1]')
          
          # Contar deleciones
          DELETIONS=$(git diff --diff-filter=D --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | wc -l | awk '{print $1}')
          
          # Detectar APIs peligrosas
          DANGEROUS_APIS=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'child_process|execSync|spawnSync|eval|dangerouslySetInnerHTML' | wc -l | awk '{print $1}')
          
          # Crear archivo JSON con datos del PR
          cat > pr-data.json << EOF
          {
            "changed_files": $CHANGED_FILES,
            "labels": $LABELS,
            "deletions": $DELETIONS,
            "dangerous_apis": $DANGEROUS_APIS
          }
          EOF
          
          echo "PR Data:"
          cat pr-data.json
      
      - name: Run OPA Policy Check
        run: |
          echo "üîç Ejecutando verificaci√≥n de pol√≠ticas OPA..."
          
          # Verificar que OPA est√° instalado
          if ! command -v opa &> /dev/null; then
            echo "‚ùå OPA no est√° instalado"
            exit 1
          fi
          
          # Verificar que el archivo de pol√≠tica existe
          if [ ! -f "policy.rego" ]; then
            echo "‚ùå Archivo policy.rego no encontrado"
            exit 1
          fi
          
          # Ejecutar pol√≠tica
          RESULT=$(opa eval --data policy.rego --input pr-data.json 'data.pr.security.deny' --format json)
          
          echo "Resultado OPA:"
          echo "$RESULT"
          
          # Verificar si hay denegaciones
          DENY_COUNT=$(echo "$RESULT" | jq -r '.result | length')
          
          if [ "$DENY_COUNT" -gt 0 ]; then
            echo "‚ùå Pol√≠ticas violadas:"
            echo "$RESULT" | jq -r '.result[]'
            echo "::error::Violaciones de pol√≠tica detectadas. Revisar y corregir."
            exit 1
          else
            echo "‚úÖ Todas las pol√≠ticas pasaron"
          fi
      
      - name: Policy Summary
        run: |
          echo "üìä Resumen de Pol√≠ticas:"
          echo "- Archivos cambiados: $(jq -r '.changed_files | length' pr-data.json)"
          echo "- Labels aplicadas: $(jq -r '.labels | length' pr-data.json)"
          echo "- Deleciones: $(jq -r '.deletions' pr-data.json)"
          echo "- APIs peligrosas: $(jq -r '.dangerous_apis' pr-data.json)"
          echo "- Pol√≠ticas evaluadas: ‚úÖ PASARON"
