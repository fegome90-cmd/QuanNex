# Quannex Context Agent - Preset de Producción Tight
# Configuración ultra-optimizada para P95 ≤ 100ms y P99 ≤ 200ms
# Optimizaciones quirúrgicas aplicadas

# ============================================
# PALANCAS DE RENDIMIENTO - PRESET TIGHT
# ============================================

# Resumen y tokens (optimizado para latencia)
CONTEXT_SUMMARY_MAX=400
# Valor tight: Reduce tokens para menor latencia
# Objetivo: P95 ≤ 100ms

# Cache LRU (optimizado para hit-rate)
CONTEXT_LRU_SIZE=2048
# Valor tight: Mayor cache para reducir I/O
# Objetivo: Menos cache misses

# Estrategia de procesamiento
CONTEXT_RECALL_STRATEGY=hybrid
# Valor tight: Balance optimizado
# Objetivo: Velocidad sin sacrificar calidad

# RAG deshabilitado para máximo rendimiento
CONTEXT_DISABLE_RAG=1
# Valor tight: Sin latencia extra
# Objetivo: Latencia mínima

# Puntuación de poda (más agresiva)
CONTEXT_PRUNE_SCORE=0.25
# Valor tight: Podado más agresivo
# Objetivo: Menos tokens, menor latencia

# Paralelismo I/O (reducido para evitar colas)
CONTEXT_PARALLEL_IO=4
# Valor tight: Menos workers para evitar contención
# Objetivo: P99 estable sin micro-colas

# Thread pool Node.js (reducido)
UV_THREADPOOL_SIZE=8
# Valor tight: Menos threads para evitar contención
# Objetivo: Menos contención en hosts pequeños

# Memoria Node.js (optimizada con flags GC)
NODE_OPTIONS="--max-old-space-size=1024 --max-semi-space-size=32 --initial-old-space-size=256"
# Valor tight: GC optimizado para pausas predecibles
# Objetivo: GC estable en hosts pequeños

# Micro-timeouts internos
INTERNAL_STEP_DEADLINE_MS=80
# Valor tight: Deadline interno para evitar outliers
# Objetivo: P99 controlado

# ============================================
# ADMISSION CONTROL Y RATE LIMITING AVANZADO
# ============================================

# Admission control
RL_MODE=token-bucket
RL_QPS=3
RL_BURST=6
RL_RETRY=expo-jitter:5,base=250ms,max=30s
RL_TIMEOUT_MS=45000

# Concurrencia y colas
MAX_CONCURRENCY=4
QUEUE_STRATEGY=priority-aging
PRIORITY_CLASSES=critical:3,normal:2,low:1

# Degradación progresiva
FALLBACK_CHAIN=model_b,model_c
DOWNGRADE_ON_429=true
CONTEXT_TRIM_ON_429=0.3
DISABLE_NONCRITICAL_TOOLS_ON_429=true

# Coste/recursos optimizados
TOPK_RAG=3
RERANK_TOPN=8
MAX_TOOL_CALLS_PER_TURN=2
PROMPT_CACHE_TTL=3600

# ============================================
# CONFIGURACIÓN DE PRODUCCIÓN TIGHT
# ============================================

# Entorno
NODE_ENV=production

# Puerto
PORT=8601

# Timeouts optimizados
CONTEXT_TIMEOUT_MS=3000
CONTEXT_MAX_REQUESTS_PER_MINUTE=1200

# Logging optimizado
LOG_LEVEL=warn
LOG_FORMAT=json

# ============================================
# MÉTRICAS OBJETIVO DE PRODUCCIÓN TIGHT
# ============================================
# P50: ≤ 20ms
# P95: ≤ 100ms  
# P99: ≤ 200ms
# Tasa de éxito: ≥ 99.5%
# Tokens salida: ≤ 500 promedio
# Memoria: Estable sin crecimiento continuo
# Throughput: ≥ 45 RPS sostenido

# ============================================
# OPTIMIZACIONES APLICADAS
# ============================================
# ✅ HTTP Keep-alive + pooling (maxSockets: 128)
# ✅ Logging asíncrono amortiguado (flush cada 200ms)
# ✅ Warm-up determinístico (50 claves + 200 requests sombra)
# ✅ Micro-timeouts internos (80ms deadline)
# ✅ Threadpool optimizado (8 threads)
# ✅ Paralelismo reducido (4 workers)
# ✅ GC optimizado (flags específicos)
# ✅ Cache LRU aumentado (2048 entradas)

# ============================================
# VALIDACIÓN DEL PRESET TIGHT
# ============================================
# Este preset aplica optimizaciones quirúrgicas:
# - Keep-alive reduce handshakes TCP
# - Logging asíncrono elimina bloqueos I/O
# - Warm-up calienta JIT y paths de I/O
# - Micro-timeouts evitan outliers en P99
# - Threadpool reducido evita contención
# - GC optimizado para pausas predecibles
# - Cache aumentado reduce cache misses
