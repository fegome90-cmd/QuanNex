# Gates de Avance MCP (Versi√≥n Endurecida)
# Makefile para ejecutar todos los gates de validaci√≥n

.PHONY: help layout contracts init e2e security resilience perf ci-gate all-gates

# Configuraci√≥n
QUANNEX_PROJECT_ROOT := $(shell pwd)
QUANNEX_TIMEOUT := 300000

# Colores para output
GREEN := \033[32m
RED := \033[31m
YELLOW := \033[33m
BLUE := \033[34m
NC := \033[0m

help: ## Mostrar ayuda
	@echo "$(BLUE)üö¶ Gates de Avance MCP (Versi√≥n Endurecida)$(NC)"
	@echo ""
	@echo "$(GREEN)Gates disponibles:$(NC)"
	@echo "  layout      - Gate 0: Integridad & Layout"
	@echo "  contracts   - Gate 1: Conformidad de contratos"
	@echo "  init        - Gate 2: MCP Autonomous Init"
	@echo "  e2e         - Gate 4: Orquestador sano"
	@echo "  security    - Gate 7: Seguridad & Exfil"
	@echo "  resilience  - Gate 9: Disponibilidad & Resiliencia"
	@echo "  perf        - Gate 5: Telemetr√≠a m√≠nima"
	@echo "  ci-gate     - Gate 12: CI/CD Go/No-Go"
	@echo "  all-gates   - Ejecutar todos los gates"
	@echo ""
	@echo "$(YELLOW)Comandos especiales:$(NC)"
	@echo "  audit       - Gate 10: MCP Enforcement"
	@echo "  supply-chain - Gate 8: Dependencias & Supply Chain"
	@echo "  quick-check - Verificaci√≥n r√°pida de gates b√°sicos"
	@echo ""

layout: ## Gate 0: Verificar integridad y layout
	@echo "$(BLUE)üö¶ Gate 0: Integridad & Layout$(NC)"
	@bash tools/find-broken-imports.sh
	@node tools/registry-sanity.js
	@echo "$(GREEN)‚úÖ Gate 0: PAS√ì$(NC)"

contracts: ## Gate 1: Verificar conformidad de contratos
	@echo "$(BLUE)üö¶ Gate 1: Conformidad de Contratos$(NC)"
	@npm run quannex:contracts
	@echo "$(GREEN)‚úÖ Gate 1: PAS√ì$(NC)"

init: ## Gate 2: Verificar MCP Autonomous Init
	@echo "$(BLUE)üö¶ Gate 2: MCP Autonomous Init$(NC)"
	@./scripts/mcp-autonomous-init.sh --verbose
	@echo "$(GREEN)‚úÖ Gate 2: PAS√ì$(NC)"

e2e: ## Gate 4: Verificar orquestador sano
	@echo "$(BLUE)üö¶ Gate 4: Orquestador Sano$(NC)"
	@npm run quannex:smoke
	@echo "$(GREEN)‚úÖ Gate 4: PAS√ì$(NC)"

security: ## Gate 7: Verificar seguridad y exfil
	@echo "$(BLUE)üö¶ Gate 7: Seguridad & Exfil$(NC)"
	@node tools/security-gate.js
	@echo "$(GREEN)‚úÖ Gate 7: PAS√ì$(NC)"

resilience: ## Gate 9: Verificar disponibilidad y resiliencia
	@echo "$(BLUE)üö¶ Gate 9: Disponibilidad & Resiliencia$(NC)"
	@node tools/resilience-gate.js
	@echo "$(GREEN)‚úÖ Gate 9: PAS√ì$(NC)"

perf: ## Gate 5: Verificar telemetr√≠a m√≠nima
	@echo "$(BLUE)üö¶ Gate 5: Telemetr√≠a M√≠nima$(NC)"
	@node tools/verify-perf.js
	@node tools/snapshot-perf.js
	@npm run ci-quannex-perf
	@echo "$(GREEN)‚úÖ Gate 5: PAS√ì$(NC)"

audit: ## Gate 10: Verificar MCP Enforcement
	@echo "$(BLUE)üö¶ Gate 10: MCP Enforcement$(NC)"
	@bash ops/audit.sh
	@echo "$(GREEN)‚úÖ Gate 10: PAS√ì$(NC)"

supply-chain: ## Gate 8: Verificar dependencias y supply chain
	@echo "$(BLUE)üö¶ Gate 8: Dependencias & Supply Chain$(NC)"
	@node tools/supply-chain-gate.js
	@echo "$(GREEN)‚úÖ Gate 8: PAS√ì$(NC)"

ci-gate: ## Gate 12: CI/CD Go/No-Go
	@echo "$(BLUE)üö¶ Gate 12: CI/CD Go/No-Go$(NC)"
	@node tools/ci-gate.js
	@echo "$(GREEN)‚úÖ Gate 12: PAS√ì$(NC)"

quick-check: ## Verificaci√≥n r√°pida de gates b√°sicos
	@echo "$(YELLOW)‚ö° Verificaci√≥n r√°pida de gates b√°sicos$(NC)"
	@echo "$(BLUE)‚ñ∂ Gate 0: Layout$(NC)"
	@bash tools/find-broken-imports.sh
	@echo "$(BLUE)‚ñ∂ MCP init$(NC)"
	@./scripts/mcp-autonomous-init.sh --verbose
	@echo "$(BLUE)‚ñ∂ Gate 1: Contracts$(NC)"
	@npm run quannex:contracts
	@echo "$(BLUE)‚ñ∂ Gate 4: Orchestrator$(NC)"
	@npm run quannex:smoke
	@echo "$(BLUE)‚ñ∂ Gate 7: Security$(NC)"
	@node tools/security-gate.js
	@echo "$(BLUE)‚ñ∂ Gate 9: Resilience$(NC)"
	@node tools/resilience-gate.js
	@echo "$(BLUE)‚ñ∂ Gate 10: MCP Enf.$(NC)"
	@bash ops/audit.sh
	@echo "$(BLUE)‚ñ∂ Gate 11: PerfGate$(NC)"
	@npm run ci-quannex-perf
	@echo "$(GREEN)‚úÖ Todos los gates b√°sicos pasaron$(NC)"

all-gates: layout contracts init e2e security resilience perf audit supply-chain ci-gate ## Ejecutar todos los gates
	@echo "$(GREEN)üéâ TODOS LOS GATES COMPLETADOS EXITOSAMENTE$(NC)"
	@echo "$(BLUE)Sistema MCP QuanNex completamente validado y listo para producci√≥n$(NC)"

# Gate espec√≠fico para CI/CD
ci-quannex-gate1: layout contracts init e2e security resilience perf ## Pipeline CI/CD completo
	@echo "$(GREEN)‚úÖ Pipeline CI/CD completado$(NC)"

# Verificaci√≥n de dependencias
check-deps: ## Verificar dependencias del sistema
	@echo "$(BLUE)üîç Verificando dependencias...$(NC)"
	@which node > /dev/null || (echo "$(RED)‚ùå Node.js no encontrado$(NC)" && exit 1)
	@which npm > /dev/null || (echo "$(RED)‚ùå npm no encontrado$(NC)" && exit 1)
	@which git > /dev/null || (echo "$(RED)‚ùå git no encontrado$(NC)" && exit 1)
	@which jq > /dev/null || (echo "$(RED)‚ùå jq no encontrado$(NC)" && exit 1)
	@echo "$(GREEN)‚úÖ Todas las dependencias est√°n disponibles$(NC)"

# Limpieza
clean: ## Limpiar archivos temporales
	@echo "$(YELLOW)üßπ Limpiando archivos temporales...$(NC)"
	@rm -rf .quannex/tmp/*
	@rm -rf .quannex/logs/*
	@echo "$(GREEN)‚úÖ Limpieza completada$(NC)"

# Informaci√≥n del sistema
info: ## Mostrar informaci√≥n del sistema
	@echo "$(BLUE)üìä Informaci√≥n del Sistema MCP QuanNex$(NC)"
	@echo "  Node.js: $(shell node --version)"
	@echo "  npm: $(shell npm --version)"
	@echo "  Git: $(shell git --version)"
	@echo "  Plataforma: $(shell uname -s) $(shell uname -m)"
	@echo "  Directorio: $(QUANNEX_PROJECT_ROOT)"
	@echo "  Timestamp: $(shell date -u +%Y-%m-%dT%H:%M:%SZ)"

# Default target
.DEFAULT_GOAL := help
